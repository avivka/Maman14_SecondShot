check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check command #2 1
check good command
check isDataStatement 5check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check command #2 1
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check operand K ,
check stat = 5
check command!
check temp value = K
check operand #
check stat = 5
check command!
check temp value = sz
check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check yyy W K
check yyy sz K
check yyy MAIN K
check yyy LOOP K
check yyy L1 K
check yyy END K
check yyy len K
check yyy STR K
check yyy LIST K
check yyy K K
check true
check operandsList on addOperandsValuesToCodeSection: K
check yyy W sz
check yyy sz sz
check true
check here's the direct operand operandNode value: sz
check direct operand bmc value:000000000010
check operandsList (next) on addOperandsValuesToCodeSection: sz
check done 17 cmp K, #sz
check 17 line           bne W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check isDataStatement 5check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand W
check stat = 5
check command!
check temp value = W
check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check yyy W W
check true
check done 17 bne W
check 17 line           L1:     inc L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check command #2 7
check good command
check isDataStatement 5check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check command #2 7
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check operand L
check stat = 5
check command!
check temp value = L3
check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check yyy W L3
check yyy sz L3
check yyy MAIN L3
check yyy LOOP L3
check yyy L1 L3
check yyy END L3
check yyy len L3
check yyy STR L3
check yyy LIST L3
check yyy K L3
check yyy L3 L3
check true
check done 17 L1:       inc L3
check 17 line .entry LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 2check done 17 .entry LOOP

check 17 line           bne LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check isDataStatement 5check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand L
check stat = 5
check command!
check temp value = LOOP
check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check yyy LOOP LOOP
check true
check done 17 bne LOOP
check 17 line END:      stop
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check command #2 15
check good command
check isDataStatement 5check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check command #2 15
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check done 17 END:      stop
check 17 line .define len = 4
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 4check done 17 .define len = 4

check 17 line STR: .string "abcdef"
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 1check done 17 STR: .string "abcdef"
check 17 line LIST: .data 6, -9, len
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 0check done 17 LIST: .data 6, -9, len

check 17 line K: .data 22
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 0check done 17 K: .data 22

check 17 line .extern L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 3check done 17 .extern L3

check 17 line
 read successfully.
check done 17

check 17 line ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
 read successfully.
check done 17 ;[forum] fix for solution in line 108 00000000101000 --> ****%%*

check 17 line ;[forum] fix for solution in line 117 00000000001000 --> *****%*
 read successfully.
check done 17 ;[forum] fix for solution in line 117 00000000001000 --> *****%*

check got here
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check yyy LIST LIST
check true
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check yyy LOOP LOOP
check true
check done external
check filename in createObjectFile:Test1.as.ob
check 9 about to openTest1.as.ob
check 10 we're in check_if_file_exists, assume Test1.as.ob full dir
check 11 able to access Test1.as.ob
check 13 file exists, opening Test1.as.ob
check code segment = 25

 check itterator = 0
check here's the line's bmc:
00000000111000

 check itterator = 1
check here's the line's bmc:
01100000

 Error:There is a problem with the translation to 4 base
 at line 25

 check itterator = 2
check here's the line's bmc:
00001000010010

 check itterator = 3
check here's the line's bmc:
00000000001010

 check itterator = 4
check here's the line's bmc:
00001001000100

 check itterator = 5
check here's the line's bmc:
00000000000001

 check itterator = 6
check here's the line's bmc:
00001100000000

 check itterator = 7
check here's the line's bmc:
11111111101100

 check itterator = 8
check here's the line's bmc:
00000011111100

 check itterator = 9
check here's the line's bmc:
00110000

 Error:There is a problem with the translation to 4 base
 at line 25

 check itterator = 10
check here's the line's bmc:
00000000101000

 check itterator = 11
check here's the line's bmc:
00000111110110

 check itterator = 12
check here's the line's bmc:
00000000000000

 check itterator = 13
check here's the line's bmc:
00000111110110

 check itterator = 14
check here's the line's bmc:
00000000000000

 check itterator = 15
check here's the line's bmc:
00000001010000

 check itterator = 16
check here's the line's bmc:
00001000011110

 check itterator = 17
check here's the line's bmc:
00000000001000

 check itterator = 18
check here's the line's bmc:
00001010000100

 check itterator = 19
check here's the line's bmc:
00000000000001

 check itterator = 20
check here's the line's bmc:
00000111000100

 check itterator = 21
check here's the line's bmc:
00000000000001

 check itterator = 22
check here's the line's bmc:
00001010000100

 check itterator = 23
check here's the line's bmc:
00000110100010

 check itterator = 24
check here's the line's bmc:
00001111000000
check walker is not null
check filename in createObjectFile:Test1.as.ob
The fileName 0x815600 is not null
check good file close!
check WTF
check close phase2
check phase2 done
check got to list destroy
check got to list destroy

 Assembler completed processing file: Test1.asavivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Com019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as

 Begin processing the following file: Test1.as

check if enters is_extention_exists
check the substring is 0x7fffd0aebca0
check is_extention_exists true
check - the extention .as exists in Test1.as
check 2 the file name that we'll try to open Test1.as
check 9 about to openTest1.as
check 10 we're in check_if_file_exists, assume Test1.as full dir
check 11 able to access Test1.as
check 13 file exists, opening Test1.as
check 14 open or creation of Test1.as was done successfully
check 16 we're on doWhileFileHaveLines
check 17 line ; file test2.as
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 ; file test2.as
check 23: this should be the command: ; 0
check 23: this should be the command: ;  1
check 23: this should be the command: ; f 2
check 23: this should be the command: ; fi 3
check 22 16
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17 ; file test2.as
check 17 line
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21
check 22 32767
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17
check 17 line .entry LIST
 read successfully.
check that we're in getStatementTypeOfSentencecheck 2!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 2
check temp value = LIST
check done 17 .entry LIST

check 17 line .extern W
 read successfully.
check that we're in getStatementTypeOfSentencecheck 3!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand W

check stat = 3
check temp value = W
check false
check important W 0
check done 17 .extern W

check 17 line .define sz = 2
 read successfully.
check that we're in getStatementTypeOfSentencecheck 4!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand s
check stat = 4
check temp value = sz
check sz
check got here   10
check index = 11
check 13 2
check out of while
check end = 13
check operand = 2
check end = 15
check v = 2
check stat = 4
check headlist good = 1         label = 1       value = sz      check type = 1  value = sz      check type = 0  value = 2       check here's the macro info: sz 2
check yyy W sz
check false
check important sz 2
check done 17 .define sz = 2

check 17 line MAIN:     mov r3, LIST[sz]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 0 MAIN:      mov r3, LIST[sz]
check yyy W MAIN
check yyy sz MAIN
check false
check important MAIN 100
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check operand r ,
check stat = 5
check command!
check temp value = r3



 check got to '[' sign
check ]
check operand L
check stat = 5
check command!
check temp value = LIST[sz]

 check got here, LIST[sz] 2
check L 1
check LI 2
check LIS 3
check LIST 4
check LIST
ok
check label = LIST
check label = LIST
check label = LIST
ok
ok
check 4
ok
check 4check good to go
check 5, 7
check sz
check stat = 5
check command!
check all good!!!!!!!!!!



check ic = 4
check done 17 MAIN:     mov r3, LIST[sz]
check 17 line LOOP:     jmp W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check command #2 9
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 4 LOOP:      jmp W
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check false
check important LOOP 104
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check operand W
check stat = 5
check command!
check temp value = W
check ic = 6
check done 17 LOOP:     jmp W
check 17 line           prn #-5
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check command #2 12
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check operand #
check stat = 5
check command!
check temp value = -5
check ic = 8
check done 17 prn #-5
check 17 line           sub r1, r4
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check command #2 3
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check operand r ,
check stat = 5
check command!
check temp value = r1
check operand r
check stat = 5
check command!
check temp value = r4
check ic = 10
check done 17 sub r1, r4
check 17 line           mov STR[5], STR[2]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0



 check got to '[' sign
check ]
check operand S ,
check stat = 5
check command!
check temp value = STR[5]



 check got to '[' sign
check ]
check operand S
check stat = 5
check command!
check temp value = STR[2]
check got here, STR[5]
check S 1
check ST 2
check STR 3
check STR
ok
check label = STR
check label = STR
check label = STR
ok
ok
check 3
ok
check 3check good to go
check 4, 5
check 5
check stat = 5
check command!
check all good!!!!!!!!!!




 check got here, STR[2] 2
check S 1
check ST 2
check STR 3
check STR
ok
check label = STR
check label = STR
check label = STR
ok
ok
check 3
ok
check 3check good to go
check 4, 5
check 2
check stat = 5
check command!
check all good!!!!!!!!!!



check ic = 15
check done 17 mov STR[5], STR[2]
check 17 line           cmp K, #sz
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check command #2 1
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check operand K ,
check stat = 5
check command!
check temp value = K
check operand #
check stat = 5
check command!
check temp value = sz
check both are not index
check ic = 18
check done 17 cmp K, #sz
check 17 line           bne W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand W
check stat = 5
check command!
check temp value = W
check ic = 20
check done 17 bne W
check 17 line           L1:     inc L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check command #2 7
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 20 L1:       inc L3
check yyy W L1
check yyy sz L1
check yyy MAIN L1
check yyy LOOP L1
check false
check important L1 120
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check operand L
check stat = 5
check command!
check temp value = L3
check ic = 22
check done 17 L1:       inc L3
check 17 line .entry LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck 2!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 2
check temp value = LOOP
check done 17 .entry LOOP

check 17 line           bne LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand L
check stat = 5
check command!
check temp value = LOOP
check ic = 24
check done 17 bne LOOP
check 17 line END:      stop
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check command #2 15
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 24 END:      stop
check yyy W END
check yyy sz END
check yyy MAIN END
check yyy LOOP END
check yyy L1 END
check false
check important END 124
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check ic = 25
check done 17 END:      stop
check 17 line .define len = 4
 read successfully.
check that we're in getStatementTypeOfSentencecheck 4!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand l
check stat = 4
check temp value = len
check len
check got here   11
check index = 12
check 14 4
check out of while
check end = 14
check operand = 4
check end = 16
check v = 4
check stat = 4
check headlist good = 1         label = 1       value = len     check type = 1  value = len     check type = 0  value = 4       check here's the macro info: len        4
check yyy W len
check yyy sz len
check yyy MAIN len
check yyy LOOP len
check yyy L1 len
check yyy END len
check false
check important len 4
check done 17 .define len = 4

check 17 line STR: .string "abcdef"
 read successfully.
check that we're in getStatementTypeOfSentencecheck 1!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand "

check stat = 1
check temp value = abcdef
check yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check false
check important STR 0
check done 17 STR: .string "abcdef"

check 17 line LIST: .data 6, -9, len
 read successfully.
check that we're in getStatementTypeOfSentencecheck 0!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand 6 ,
check stat = 0
check temp value = 6
check operand - ,
check stat = 0
check temp value = -9
check operand l

check stat = 0
check yyy W len
check yyy sz len
check yyy MAIN len
check yyy LOOP len
check yyy L1 len
check yyy END len
check yyy len len
check true
check temp value = len
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check false
check important LIST 7
check done 17 LIST: .data 6, -9, len

check 17 line K: .data 22
 read successfully.
check that we're in getStatementTypeOfSentencecheck 0!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand 2

check stat = 0
check temp value = 22
check yyy W K
check yyy sz K
check yyy MAIN K
check yyy LOOP K
check yyy L1 K
check yyy END K
check yyy len K
check yyy STR K
check yyy LIST K
check false
check important K 10
check done 17 K: .data 22

check 17 line .extern L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck 3!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 3
check temp value = L3
check yyy W L3
check yyy sz L3
check yyy MAIN L3
check yyy LOOP L3
check yyy L1 L3
check yyy END L3
check yyy len L3
check yyy STR L3
check yyy LIST L3
check yyy K L3
check false
check important L3 0
check done 17 .extern L3

check 17 line
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21
check 22 32767
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17
check 17 line ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
check 23: this should be the command: ; 0
check 23: this should be the command: ;[ 1
check 23: this should be the command: ;[f 2
check 23: this should be the command: ;[fo 3
check 22 16
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17 ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
check 17 line ;[forum] fix for solution in line 117 00000000001000 --> *****%*
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 ;[forum] fix for solution in line 117 00000000001000 --> *****%*
check 23: this should be the command: ; 0
check 23: this should be the command: ;[ 1
check 23: this should be the command: ;[f 2
check 23: this should be the command: ;[fo 3
check 22 16
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17 ;[forum] fix for solution in line 117 00000000001000 --> *****%*
check 18 lets update the symbol table addresses according to IC and DC
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 20 is ext or dat
check 19 get the next node in Symbol is done successfully.
check 20 is ext or dat
check 19 get the next node in Symbol is done successfully.
check 20 is ext or dat
check 19 get the next node in Symbol is done successfully.
check 22 attempt to print the Symbol table
W        3       0
sz       0       2
MAIN     1       100
LOOP     1       104
L1       1       120
END      1       124
len      0       4
STR      2       125
LIST     2       132
K        2       135
L3       3       0
check is null 1!
check 24 got to doPhase2
check 24 here's the IC 25
check 24 here's the DC 11

check if enters is_extention_exists
check the substring is 0x7fffd0aebca0
check is_extention_exists true
check 1 again - the extention .as exists in Test1.as
check 2 again the file name that we'll try to open Test1.as
check 9 about to openTest1.as
check 10 we're in check_if_file_exists, assume Test1.as full dir
check 11 able to access Test1.as
check 13 file exists, opening Test1.as
check 14 again open or creation of Test1.as was done successfully
this is the IC size:25
check 16 we're on doWhileFileHaveLines
check 17 line ; file test2.as
 read successfully.
check done 17 ; file test2.as

check 17 line
 read successfully.
check done 17

check 17 line .entry LIST
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 2check done 17 .entry LIST

check 17 line .extern W
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 3check done 17 .extern W

check 17 line .define sz = 2
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 4check done 17 .define sz = 2

check 17 line MAIN:     mov r3, LIST[sz]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check isDataStatement 5check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check operand r ,
check stat = 5
check command!
check temp value = r3



 check got to '[' sign
check ]
check operand L
check stat = 5
check command!
check temp value = LIST[sz]
check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check src register operand value:011000
check operandsList on addOperandsValuesToCodeSection: r3
check LK 1
check LI 2
check LIS 3
check LIST 4
check LIST
ok
check label = LIST
check label = LIST
check label = LIST
ok
ok
check 4
ok
check 4check good to go
check 5, 7
check sz
check stat = 5
check command!
check all good!!!!!!!!!!



check LK 1
check LI 2
check LIS 3
check LIST 4
check LIST
check here's the indexLabel: LIST
check LISTcheck yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check yyy LIST LIST
check true
check here's the label that was found: LIST 2
check yyy W sz
check yyy sz sz
check true
check operandsList (next) on addOperandsValuesToCodeSection: LIST[sz]
check done 17 MAIN:     mov r3, LIST[sz]
check 17 line LOOP:     jmp W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check command #2 9
check good command
check isDataStatement 5check
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check command #2 9
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check operand W
check stat = 5
check command!
check temp value = W
check
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check yyy W W
check true
check done 17 LOOP:     jmp W
check 17 line           prn #-5
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check command #2 12
check good command
check isDataStatement 5check
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check command #2 12
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check operand #
check stat = 5
check command!
check temp value = -5
check
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check here's the direct operand operandNode value: -5
check direct operand bmc value:111111111011
check done 17 prn #-5
check 17 line           sub r1, r4
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check command #2 3
check good command
check isDataStatement 5check
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check command #2 3
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check operand r ,
check stat = 5
check command!
check temp value = r1
check operand r
check stat = 5
check command!
check temp value = r4
check
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check registerOneValue:001
check registerTwoValue:100
check codeSection[IC]: 00110000
check done 17 sub r1, r4
check 17 line           mov STR[5], STR[2]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check isDataStatement 5check
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0



 check got to '[' sign
check ]
check operand S ,
check stat = 5
check command!
check temp value = STR[5]



 check got to '[' sign
check ]
check operand S
check stat = 5
check command!
check temp value = STR[2]
check
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check S 1
check ST 2
check STR 3
check STR
ok
check label = STR
check label = STR
check label = STR
ok
ok
check 3
ok
check 3check good to go
check 4, 5
check 5
check stat = 5
check command!
check all good!!!!!!!!!!



check S 1
check ST 2
check STR 3
check STR
check here's the indexLabel: STR
check STRcheck yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check yyy STR STR
check true
check here's the label that was found: STR 2
check operandsList on addOperandsValuesToCodeSection: STR[5]
check S 1
check ST 2
check STR 3
check STR
ok
check label = STR
check label = STR
check label = STR
ok
ok
check 3
ok
check 3check good to go
check 4, 5
check 2
check stat = 5
check command!
check all good!!!!!!!!!!



check S 1
check ST 2
check STR 3
check STR
check here's the indexLabel: STR
check STRcheck yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check yyy STR STR
check true
check here's the label that was found: STR 2
check operandsList (next) on addOperandsValuesToCodeSection: STR[2]
check done 17 mov STR[5], STR[2]
check 17 line           cmp K, #sz
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check command #2 1
check good command
check isDataStatement 5check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check command #2 1
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check operand K ,
check stat = 5
check command!
check temp value = K
check operand #
check stat = 5
check command!
check temp value = sz
check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check yyy W K
check yyy sz K
check yyy MAIN K
check yyy LOOP K
check yyy L1 K
check yyy END K
check yyy len K
check yyy STR K
check yyy LIST K
check yyy K K
check true
check operandsList on addOperandsValuesToCodeSection: K
check yyy W sz
check yyy sz sz
check true
check here's the direct operand operandNode value: sz
check direct operand bmc value:000000000010
check operandsList (next) on addOperandsValuesToCodeSection: sz
check done 17 cmp K, #sz
check 17 line           bne W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check isDataStatement 5check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand W
check stat = 5
check command!
check temp value = W
check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check yyy W W
check true
check done 17 bne W
check 17 line           L1:     inc L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check command #2 7
check good command
check isDataStatement 5check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check command #2 7
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check operand L
check stat = 5
check command!
check temp value = L3
check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check yyy W L3
check yyy sz L3
check yyy MAIN L3
check yyy LOOP L3
check yyy L1 L3
check yyy END L3
check yyy len L3
check yyy STR L3
check yyy LIST L3
check yyy K L3
check yyy L3 L3
check true
check done 17 L1:       inc L3
check 17 line .entry LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 2check done 17 .entry LOOP

check 17 line           bne LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check isDataStatement 5check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand L
check stat = 5
check command!
check temp value = LOOP
check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check yyy LOOP LOOP
check true
check done 17 bne LOOP
check 17 line END:      stop
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check command #2 15
check good command
check isDataStatement 5check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check command #2 15
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check done 17 END:      stop
check 17 line .define len = 4
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 4check done 17 .define len = 4

check 17 line STR: .string "abcdef"
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 1check done 17 STR: .string "abcdef"
check 17 line LIST: .data 6, -9, len
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 0check done 17 LIST: .data 6, -9, len

check 17 line K: .data 22
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 0check done 17 K: .data 22

check 17 line .extern L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 3check done 17 .extern L3

check 17 line
 read successfully.
check done 17

check 17 line ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
 read successfully.
check done 17 ;[forum] fix for solution in line 108 00000000101000 --> ****%%*

check 17 line ;[forum] fix for solution in line 117 00000000001000 --> *****%*
 read successfully.
check done 17 ;[forum] fix for solution in line 117 00000000001000 --> *****%*

check got here
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check yyy LIST LIST
check true
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check yyy LOOP LOOP
check true
check done external
check filename in createObjectFile:Test1.as.ob
check 9 about to openTest1.as.ob
check 10 we're in check_if_file_exists, assume Test1.as.ob full dir
check 11 able to access Test1.as.ob
check 13 file exists, opening Test1.as.ob
check code segment = 25

 check itterator = 0
check here's the line's bmc:
00000000111000

 check itterator = 1
check here's the line's bmc:
01100000

 Error:There is a problem with the translation to 4 base
 at line 25

 check itterator = 2
check here's the line's bmc:
00001000010010

 check itterator = 3
check here's the line's bmc:
00000000001010

 check itterator = 4
check here's the line's bmc:
00001001000100

 check itterator = 5
check here's the line's bmc:
00000000000001

 check itterator = 6
check here's the line's bmc:
00001100000000

 check itterator = 7
check here's the line's bmc:
11111111101100

 check itterator = 8
check here's the line's bmc:
00000011111100

 check itterator = 9
check here's the line's bmc:
00110000

 Error:There is a problem with the translation to 4 base
 at line 25

 check itterator = 10
check here's the line's bmc:
00000000101000

 check itterator = 11
check here's the line's bmc:
00000111110110

 check itterator = 12
check here's the line's bmc:
00000000000000

 check itterator = 13
check here's the line's bmc:
00000111110110

 check itterator = 14
check here's the line's bmc:
00000000000000

 check itterator = 15
check here's the line's bmc:
00000001010000

 check itterator = 16
check here's the line's bmc:
00001000011110

 check itterator = 17
check here's the line's bmc:
00000000001000

 check itterator = 18
check here's the line's bmc:
00001010000100

 check itterator = 19
check here's the line's bmc:
00000000000001

 check itterator = 20
check here's the line's bmc:
00000111000100

 check itterator = 21
check here's the line's bmc:
00000000000001

 check itterator = 22
check here's the line's bmc:
00001010000100

 check itterator = 23
check here's the line's bmc:
00000110100010

 check itterator = 24
check here's the line's bmc:
00001111000000
check walker is not null
check filename in createObjectFile:Test1.as.ob
The fileName 0x1c99600 is not null
check good file close!
check WTF
check close phase2
check phase2 done
check got to list destroy
check got to list destroy

 Assembler completed processing file: Test1.asavivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Com019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
src/modules/CodeSegement.c: In function �addOperandValueToCodeSection�:
src/modules/CodeSegement.c:296:16: warning: format �%s� expects argument of type �char *�, but argument 2 has type �int� [-Wformat=]
         printf("check the label's address:%s", symbol->address);
                ^
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as

 Begin processing the following file: Test1.as

check if enters is_extention_exists
check the substring is 0x7fffe4a57e30
check is_extention_exists true
check - the extention .as exists in Test1.as
check 2 the file name that we'll try to open Test1.as
check 9 about to openTest1.as
check 10 we're in check_if_file_exists, assume Test1.as full dir
check 11 able to access Test1.as
check 13 file exists, opening Test1.as
check 14 open or creation of Test1.as was done successfully
check 16 we're on doWhileFileHaveLines
check 17 line ; file test2.as
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 ; file test2.as
check 23: this should be the command: ; 0
check 23: this should be the command: ;  1
check 23: this should be the command: ; f 2
check 23: this should be the command: ; fi 3
check 22 16
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17 ; file test2.as
check 17 line
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21
check 22 32767
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17
check 17 line .entry LIST
 read successfully.
check that we're in getStatementTypeOfSentencecheck 2!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 2
check temp value = LIST
check done 17 .entry LIST

check 17 line .extern W
 read successfully.
check that we're in getStatementTypeOfSentencecheck 3!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand W

check stat = 3
check temp value = W
check false
check important W 0
check done 17 .extern W

check 17 line .define sz = 2
 read successfully.
check that we're in getStatementTypeOfSentencecheck 4!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand s
check stat = 4
check temp value = sz
check sz
check got here   10
check index = 11
check 13 2
check out of while
check end = 13
check operand = 2
check end = 15
check v = 2
check stat = 4
check headlist good = 1         label = 1       value = sz      check type = 1  value = sz      check type = 0  value = 2       check here's the macro info: sz 2
check yyy W sz
check false
check important sz 2
check done 17 .define sz = 2

check 17 line MAIN:     mov r3, LIST[sz]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 0 MAIN:      mov r3, LIST[sz]
check yyy W MAIN
check yyy sz MAIN
check false
check important MAIN 100
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check operand r ,
check stat = 5
check command!
check temp value = r3



 check got to '[' sign
check ]
check operand L
check stat = 5
check command!
check temp value = LIST[sz]

 check got here, LIST[sz] 2
check L 1
check LI 2
check LIS 3
check LIST 4
check LIST
ok
check label = LIST
check label = LIST
check label = LIST
ok
ok
check 4
ok
check 4check good to go
check 5, 7
check sz
check stat = 5
check command!
check all good!!!!!!!!!!



check ic = 4
check done 17 MAIN:     mov r3, LIST[sz]
check 17 line LOOP:     jmp W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check command #2 9
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 4 LOOP:      jmp W
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check false
check important LOOP 104
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check operand W
check stat = 5
check command!
check temp value = W
check ic = 6
check done 17 LOOP:     jmp W
check 17 line           prn #-5
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check command #2 12
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check operand #
check stat = 5
check command!
check temp value = -5
check ic = 8
check done 17 prn #-5
check 17 line           sub r1, r4
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check command #2 3
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check operand r ,
check stat = 5
check command!
check temp value = r1
check operand r
check stat = 5
check command!
check temp value = r4
check ic = 10
check done 17 sub r1, r4
check 17 line           mov STR[5], STR[2]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0



 check got to '[' sign
check ]
check operand S ,
check stat = 5
check command!
check temp value = STR[5]



 check got to '[' sign
check ]
check operand S
check stat = 5
check command!
check temp value = STR[2]
check got here, STR[5]
check S 1
check ST 2
check STR 3
check STR
ok
check label = STR
check label = STR
check label = STR
ok
ok
check 3
ok
check 3check good to go
check 4, 5
check 5
check stat = 5
check command!
check all good!!!!!!!!!!




 check got here, STR[2] 2
check S 1
check ST 2
check STR 3
check STR
ok
check label = STR
check label = STR
check label = STR
ok
ok
check 3
ok
check 3check good to go
check 4, 5
check 2
check stat = 5
check command!
check all good!!!!!!!!!!



check ic = 15
check done 17 mov STR[5], STR[2]
check 17 line           cmp K, #sz
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check command #2 1
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check operand K ,
check stat = 5
check command!
check temp value = K
check operand #
check stat = 5
check command!
check temp value = sz
check both are not index
check ic = 18
check done 17 cmp K, #sz
check 17 line           bne W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand W
check stat = 5
check command!
check temp value = W
check ic = 20
check done 17 bne W
check 17 line           L1:     inc L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check command #2 7
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 20 L1:       inc L3
check yyy W L1
check yyy sz L1
check yyy MAIN L1
check yyy LOOP L1
check false
check important L1 120
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check operand L
check stat = 5
check command!
check temp value = L3
check ic = 22
check done 17 L1:       inc L3
check 17 line .entry LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck 2!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 2
check temp value = LOOP
check done 17 .entry LOOP

check 17 line           bne LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand L
check stat = 5
check command!
check temp value = LOOP
check ic = 24
check done 17 bne LOOP
check 17 line END:      stop
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check command #2 15
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 24 END:      stop
check yyy W END
check yyy sz END
check yyy MAIN END
check yyy LOOP END
check yyy L1 END
check false
check important END 124
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check ic = 25
check done 17 END:      stop
check 17 line .define len = 4
 read successfully.
check that we're in getStatementTypeOfSentencecheck 4!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand l
check stat = 4
check temp value = len
check len
check got here   11
check index = 12
check 14 4
check out of while
check end = 14
check operand = 4
check end = 16
check v = 4
check stat = 4
check headlist good = 1         label = 1       value = len     check type = 1  value = len     check type = 0  value = 4       check here's the macro info: len        4
check yyy W len
check yyy sz len
check yyy MAIN len
check yyy LOOP len
check yyy L1 len
check yyy END len
check false
check important len 4
check done 17 .define len = 4

check 17 line STR: .string "abcdef"
 read successfully.
check that we're in getStatementTypeOfSentencecheck 1!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand "

check stat = 1
check temp value = abcdef
check yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check false
check important STR 0
check done 17 STR: .string "abcdef"

check 17 line LIST: .data 6, -9, len
 read successfully.
check that we're in getStatementTypeOfSentencecheck 0!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand 6 ,
check stat = 0
check temp value = 6
check operand - ,
check stat = 0
check temp value = -9
check operand l

check stat = 0
check yyy W len
check yyy sz len
check yyy MAIN len
check yyy LOOP len
check yyy L1 len
check yyy END len
check yyy len len
check true
check temp value = len
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check false
check important LIST 7
check done 17 LIST: .data 6, -9, len

check 17 line K: .data 22
 read successfully.
check that we're in getStatementTypeOfSentencecheck 0!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand 2

check stat = 0
check temp value = 22
check yyy W K
check yyy sz K
check yyy MAIN K
check yyy LOOP K
check yyy L1 K
check yyy END K
check yyy len K
check yyy STR K
check yyy LIST K
check false
check important K 10
check done 17 K: .data 22

check 17 line .extern L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck 3!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 3
check temp value = L3
check yyy W L3
check yyy sz L3
check yyy MAIN L3
check yyy LOOP L3
check yyy L1 L3
check yyy END L3
check yyy len L3
check yyy STR L3
check yyy LIST L3
check yyy K L3
check false
check important L3 0
check done 17 .extern L3

check 17 line
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21
check 22 32767
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17
check 17 line ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
check 23: this should be the command: ; 0
check 23: this should be the command: ;[ 1
check 23: this should be the command: ;[f 2
check 23: this should be the command: ;[fo 3
check 22 16
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17 ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
check 17 line ;[forum] fix for solution in line 117 00000000001000 --> *****%*
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 ;[forum] fix for solution in line 117 00000000001000 --> *****%*
check 23: this should be the command: ; 0
check 23: this should be the command: ;[ 1
check 23: this should be the command: ;[f 2
check 23: this should be the command: ;[fo 3
check 22 16
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17 ;[forum] fix for solution in line 117 00000000001000 --> *****%*
check 18 lets update the symbol table addresses according to IC and DC
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 20 is ext or dat
check 19 get the next node in Symbol is done successfully.
check 20 is ext or dat
check 19 get the next node in Symbol is done successfully.
check 20 is ext or dat
check 19 get the next node in Symbol is done successfully.
check 22 attempt to print the Symbol table
W        3       0
sz       0       2
MAIN     1       100
LOOP     1       104
L1       1       120
END      1       124
len      0       4
STR      2       125
LIST     2       132
K        2       135
L3       3       0
check is null 1!
check 24 got to doPhase2
check 24 here's the IC 25
check 24 here's the DC 11

check if enters is_extention_exists
check the substring is 0x7fffe4a57e30
check is_extention_exists true
check 1 again - the extention .as exists in Test1.as
check 2 again the file name that we'll try to open Test1.as
check 9 about to openTest1.as
check 10 we're in check_if_file_exists, assume Test1.as full dir
check 11 able to access Test1.as
check 13 file exists, opening Test1.as
check 14 again open or creation of Test1.as was done successfully
this is the IC size:25
check 16 we're on doWhileFileHaveLines
check 17 line ; file test2.as
 read successfully.
check done 17 ; file test2.as

check 17 line
 read successfully.
check done 17

check 17 line .entry LIST
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 2check done 17 .entry LIST

check 17 line .extern W
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 3check done 17 .extern W

check 17 line .define sz = 2
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 4check done 17 .define sz = 2

check 17 line MAIN:     mov r3, LIST[sz]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check isDataStatement 5check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check operand r ,
check stat = 5
check command!
check temp value = r3



 check got to '[' sign
check ]
check operand L
check stat = 5
check command!
check temp value = LIST[sz]
check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check src register operand value:011000
check operandsList on addOperandsValuesToCodeSection: r3
check LK 1
check LI 2
check LIS 3
check LIST 4
check LIST
ok
check label = LIST
check label = LIST
check label = LIST
ok
ok
check 4
ok
check 4check good to go
check 5, 7
check sz
check stat = 5
check command!
check all good!!!!!!!!!!



check LK 1
check LI 2
check LIS 3
check LIST 4
check LIST
check here's the indexLabel: LIST
check LISTcheck yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check yyy LIST LIST
check true
check here's the label that was found: LIST 2
Segmentation fault (core dumped)
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as

 Begin processing the following file: Test1.as

check if enters is_extention_exists
check the substring is 0x7ffff68ded60
check is_extention_exists true
check - the extention .as exists in Test1.as
check 2 the file name that we'll try to open Test1.as
check 9 about to openTest1.as
check 10 we're in check_if_file_exists, assume Test1.as full dir
check 11 able to access Test1.as
check 13 file exists, opening Test1.as
check 14 open or creation of Test1.as was done successfully
check 16 we're on doWhileFileHaveLines
check 17 line ; file test2.as
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 ; file test2.as
check 23: this should be the command: ; 0
check 23: this should be the command: ;  1
check 23: this should be the command: ; f 2
check 23: this should be the command: ; fi 3
check 22 16
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17 ; file test2.as
check 17 line
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21
check 22 32767
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17
check 17 line .entry LIST
 read successfully.
check that we're in getStatementTypeOfSentencecheck 2!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 2
check temp value = LIST
check done 17 .entry LIST

check 17 line .extern W
 read successfully.
check that we're in getStatementTypeOfSentencecheck 3!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand W

check stat = 3
check temp value = W
check false
check important W 0
check done 17 .extern W

check 17 line .define sz = 2
 read successfully.
check that we're in getStatementTypeOfSentencecheck 4!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand s
check stat = 4
check temp value = sz
check sz
check got here   10
check index = 11
check 13 2
check out of while
check end = 13
check operand = 2
check end = 15
check v = 2
check stat = 4
check headlist good = 1         label = 1       value = sz      check type = 1  value = sz      check type = 0  value = 2       check here's the macro info: sz 2
check yyy W sz
check false
check important sz 2
check done 17 .define sz = 2

check 17 line MAIN:     mov r3, LIST[sz]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 0 MAIN:      mov r3, LIST[sz]
check yyy W MAIN
check yyy sz MAIN
check false
check important MAIN 100
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check operand r ,
check stat = 5
check command!
check temp value = r3



 check got to '[' sign
check ]
check operand L
check stat = 5
check command!
check temp value = LIST[sz]

 check got here, LIST[sz] 2
check L 1
check LI 2
check LIS 3
check LIST 4
check LIST
ok
check label = LIST
check label = LIST
check label = LIST
ok
ok
check 4
ok
check 4check good to go
check 5, 7
check sz
check stat = 5
check command!
check all good!!!!!!!!!!



check ic = 4
check done 17 MAIN:     mov r3, LIST[sz]
check 17 line LOOP:     jmp W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check command #2 9
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 4 LOOP:      jmp W
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check false
check important LOOP 104
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check operand W
check stat = 5
check command!
check temp value = W
check ic = 6
check done 17 LOOP:     jmp W
check 17 line           prn #-5
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check command #2 12
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check operand #
check stat = 5
check command!
check temp value = -5
check ic = 8
check done 17 prn #-5
check 17 line           sub r1, r4
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check command #2 3
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check operand r ,
check stat = 5
check command!
check temp value = r1
check operand r
check stat = 5
check command!
check temp value = r4
check ic = 10
check done 17 sub r1, r4
check 17 line           mov STR[5], STR[2]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0



 check got to '[' sign
check ]
check operand S ,
check stat = 5
check command!
check temp value = STR[5]



 check got to '[' sign
check ]
check operand S
check stat = 5
check command!
check temp value = STR[2]
check got here, STR[5]
check S 1
check ST 2
check STR 3
check STR
ok
check label = STR
check label = STR
check label = STR
ok
ok
check 3
ok
check 3check good to go
check 4, 5
check 5
check stat = 5
check command!
check all good!!!!!!!!!!




 check got here, STR[2] 2
check S 1
check ST 2
check STR 3
check STR
ok
check label = STR
check label = STR
check label = STR
ok
ok
check 3
ok
check 3check good to go
check 4, 5
check 2
check stat = 5
check command!
check all good!!!!!!!!!!



check ic = 15
check done 17 mov STR[5], STR[2]
check 17 line           cmp K, #sz
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check command #2 1
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check operand K ,
check stat = 5
check command!
check temp value = K
check operand #
check stat = 5
check command!
check temp value = sz
check both are not index
check ic = 18
check done 17 cmp K, #sz
check 17 line           bne W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand W
check stat = 5
check command!
check temp value = W
check ic = 20
check done 17 bne W
check 17 line           L1:     inc L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check command #2 7
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 20 L1:       inc L3
check yyy W L1
check yyy sz L1
check yyy MAIN L1
check yyy LOOP L1
check false
check important L1 120
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check operand L
check stat = 5
check command!
check temp value = L3
check ic = 22
check done 17 L1:       inc L3
check 17 line .entry LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck 2!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 2
check temp value = LOOP
check done 17 .entry LOOP

check 17 line           bne LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand L
check stat = 5
check command!
check temp value = LOOP
check ic = 24
check done 17 bne LOOP
check 17 line END:      stop
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check command #2 15
check good command
check 5!!!!!!!!!!!!!!!!!!!!!!!!






 check comman statement








check got to extractlabel
check ic = 24 END:      stop
check yyy W END
check yyy sz END
check yyy MAIN END
check yyy LOOP END
check yyy L1 END
check false
check important END 124
!!!!!!!!!!!!!!!!!!!check all good!!!!!!!!!!!!!!!!!






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check ic = 25
check done 17 END:      stop
check 17 line .define len = 4
 read successfully.
check that we're in getStatementTypeOfSentencecheck 4!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand l
check stat = 4
check temp value = len
check len
check got here   11
check index = 12
check 14 4
check out of while
check end = 14
check operand = 4
check end = 16
check v = 4
check stat = 4
check headlist good = 1         label = 1       value = len     check type = 1  value = len     check type = 0  value = 4       check here's the macro info: len        4
check yyy W len
check yyy sz len
check yyy MAIN len
check yyy LOOP len
check yyy L1 len
check yyy END len
check false
check important len 4
check done 17 .define len = 4

check 17 line STR: .string "abcdef"
 read successfully.
check that we're in getStatementTypeOfSentencecheck 1!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand "

check stat = 1
check temp value = abcdef
check yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check false
check important STR 0
check done 17 STR: .string "abcdef"

check 17 line LIST: .data 6, -9, len
 read successfully.
check that we're in getStatementTypeOfSentencecheck 0!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand 6 ,
check stat = 0
check temp value = 6
check operand - ,
check stat = 0
check temp value = -9
check operand l

check stat = 0
check yyy W len
check yyy sz len
check yyy MAIN len
check yyy LOOP len
check yyy L1 len
check yyy END len
check yyy len len
check true
check temp value = len
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check false
check important LIST 7
check done 17 LIST: .data 6, -9, len

check 17 line K: .data 22
 read successfully.
check that we're in getStatementTypeOfSentencecheck 0!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand 2

check stat = 0
check temp value = 22
check yyy W K
check yyy sz K
check yyy MAIN K
check yyy LOOP K
check yyy L1 K
check yyy END K
check yyy len K
check yyy STR K
check yyy LIST K
check false
check important K 10
check done 17 K: .data 22

check 17 line .extern L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck 3!!!!!!!!!!!!!!!!!!!!!!!!
check got to extractlabel
check that we're in getStatementTypeOfSentence





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 3
check temp value = L3
check yyy W L3
check yyy sz L3
check yyy MAIN L3
check yyy LOOP L3
check yyy L1 L3
check yyy END L3
check yyy len L3
check yyy STR L3
check yyy LIST L3
check yyy K L3
check false
check important L3 0
check done 17 .extern L3

check 17 line
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21
check 22 32767
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17
check 17 line ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
check 23: this should be the command: ; 0
check 23: this should be the command: ;[ 1
check 23: this should be the command: ;[f 2
check 23: this should be the command: ;[fo 3
check 22 16
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17 ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
check 17 line ;[forum] fix for solution in line 117 00000000001000 --> *****%*
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 ;[forum] fix for solution in line 117 00000000001000 --> *****%*
check 23: this should be the command: ; 0
check 23: this should be the command: ;[ 1
check 23: this should be the command: ;[f 2
check 23: this should be the command: ;[fo 3
check 22 16
check command #2 16
check 6!!!!!!!!!!!!!!!!!!!!!!!!
check done 17 ;[forum] fix for solution in line 117 00000000001000 --> *****%*
check 18 lets update the symbol table addresses according to IC and DC
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 19 get the next node in Symbol is done successfully.
check 20 is ext or dat
check 19 get the next node in Symbol is done successfully.
check 20 is ext or dat
check 19 get the next node in Symbol is done successfully.
check 20 is ext or dat
check 19 get the next node in Symbol is done successfully.
check 22 attempt to print the Symbol table
W        3       0
sz       0       2
MAIN     1       100
LOOP     1       104
L1       1       120
END      1       124
len      0       4
STR      2       125
LIST     2       132
K        2       135
L3       3       0
check is null 1!
check 24 got to doPhase2
check 24 here's the IC 25
check 24 here's the DC 11

check if enters is_extention_exists
check the substring is 0x7ffff68ded60
check is_extention_exists true
check 1 again - the extention .as exists in Test1.as
check 2 again the file name that we'll try to open Test1.as
check 9 about to openTest1.as
check 10 we're in check_if_file_exists, assume Test1.as full dir
check 11 able to access Test1.as
check 13 file exists, opening Test1.as
check 14 again open or creation of Test1.as was done successfully
this is the IC size:25
check 16 we're on doWhileFileHaveLines
check 17 line ; file test2.as
 read successfully.
check done 17 ; file test2.as

check 17 line
 read successfully.
check done 17

check 17 line .entry LIST
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 2check done 17 .entry LIST

check 17 line .extern W
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 3check done 17 .extern W

check 17 line .define sz = 2
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 4check done 17 .define sz = 2

check 17 line MAIN:     mov r3, LIST[sz]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check isDataStatement 5check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check operand r ,
check stat = 5
check command!
check temp value = r3



 check got to '[' sign
check ]
check operand L
check stat = 5
check command!
check temp value = LIST[sz]
check
check got to extractlabel
check 21 mov r3, LIST[sz]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check src register operand value:011000
check operandsList on addOperandsValuesToCodeSection: r3
check LK? 1
check LI? 2
check LIS? 3
check LIST 4
check LIST
ok
check label = LIST
check label = LIST
check label = LIST
ok
ok
check 4
ok
check 4check good to go
check 5, 7
check sz
check stat = 5
check command!
check all good!!!!!!!!!!



check LK? 1
check LI? 2
check LIS? 3
check LIST 4
check LIST
check here's the indexLabel: LIST
check LISTcheck yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check yyy LIST LIST
check true
check here's the label that was found: LIST 2
check the label's address:132check yyy W sz
check yyy sz sz
check true
check operandsList (next) on addOperandsValuesToCodeSection: LIST[sz]
check done 17 MAIN:     mov r3, LIST[sz]
check 17 line LOOP:     jmp W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check command #2 9
check good command
check isDataStatement 5check
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check command #2 9
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check operand W
check stat = 5
check command!
check temp value = W
check
check got to extractlabel
check 21 jmp W
check 23: this should be the command: j 0
check 23: this should be the command: jm 1
check 23: this should be the command: jmp 2
check 22 9
check yyy W W
check true
check done 17 LOOP:     jmp W
check 17 line           prn #-5
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check command #2 12
check good command
check isDataStatement 5check
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check command #2 12
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check operand #
check stat = 5
check command!
check temp value = -5
check
check got to extractlabel
check 21 prn #-5
check 23: this should be the command: p 0
check 23: this should be the command: pr 1
check 23: this should be the command: prn 2
check 22 12
check here's the direct operand operandNode value: -5
check direct operand bmc value:111111111011
check done 17 prn #-5
check 17 line           sub r1, r4
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check command #2 3
check good command
check isDataStatement 5check
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check command #2 3
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check operand r ,
check stat = 5
check command!
check temp value = r1
check operand r
check stat = 5
check command!
check temp value = r4
check
check got to extractlabel
check 21 sub r1, r4
check 23: this should be the command: s 0
check 23: this should be the command: su 1
check 23: this should be the command: sub 2
check 22 3
check registerOneValue:001
check registerTwoValue:100
check codeSection[IC]: 00110000
check done 17 sub r1, r4
check 17 line           mov STR[5], STR[2]
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check isDataStatement 5check
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check command #2 0
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0



 check got to '[' sign
check ]
check operand S ,
check stat = 5
check command!
check temp value = STR[5]



 check got to '[' sign
check ]
check operand S
check stat = 5
check command!
check temp value = STR[2]
check
check got to extractlabel
check 21 mov STR[5], STR[2]
check 23: this should be the command: m 0
check 23: this should be the command: mo 1
check 23: this should be the command: mov 2
check 22 0
check S 1
check ST 2
check STR 3
check STR
ok
check label = STR
check label = STR
check label = STR
ok
ok
check 3
ok
check 3check good to go
check 4, 5
check 5
check stat = 5
check command!
check all good!!!!!!!!!!



check S 1
check ST 2
check STR 3
check STR
check here's the indexLabel: STR
check STRcheck yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check yyy STR STR
check true
check here's the label that was found: STR 2
check the label's address:125check operandsList on addOperandsValuesToCodeSection: STR[5]
check S 1
check ST 2
check STR 3
check STR
ok
check label = STR
check label = STR
check label = STR
ok
ok
check 3
ok
check 3check good to go
check 4, 5
check 2
check stat = 5
check command!
check all good!!!!!!!!!!



check S 1
check ST 2
check STR 3
check STR
check here's the indexLabel: STR
check STRcheck yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check yyy STR STR
check true
check here's the label that was found: STR 2
check the label's address:125check operandsList (next) on addOperandsValuesToCodeSection: STR[2]
check done 17 mov STR[5], STR[2]
check 17 line           cmp K, #sz
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check command #2 1
check good command
check isDataStatement 5check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check command #2 1
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check operand K ,
check stat = 5
check command!
check temp value = K
check operand #
check stat = 5
check command!
check temp value = sz
check
check got to extractlabel
check 21 cmp K, #sz
check 23: this should be the command: c 0
check 23: this should be the command: cm 1
check 23: this should be the command: cmp 2
check 22 1
check yyy W K
check yyy sz K
check yyy MAIN K
check yyy LOOP K
check yyy L1 K
check yyy END K
check yyy len K
check yyy STR K
check yyy LIST K
check yyy K K
check true
check operandsList on addOperandsValuesToCodeSection: K
check yyy W sz
check yyy sz sz
check true
check here's the direct operand operandNode value: sz
check direct operand bmc value:000000000010
check operandsList (next) on addOperandsValuesToCodeSection: sz
check done 17 cmp K, #sz
check 17 line           bne W
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check isDataStatement 5check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand W
check stat = 5
check command!
check temp value = W
check
check got to extractlabel
check 21 bne W
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check yyy W W
check true
check done 17 bne W
check 17 line           L1:     inc L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check command #2 7
check good command
check isDataStatement 5check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check command #2 7
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check operand L
check stat = 5
check command!
check temp value = L3
check
check got to extractlabel
check 21 inc L3
check 23: this should be the command: i 0
check 23: this should be the command: in 1
check 23: this should be the command: inc 2
check 22 7
check yyy W L3
check yyy sz L3
check yyy MAIN L3
check yyy LOOP L3
check yyy L1 L3
check yyy END L3
check yyy len L3
check yyy STR L3
check yyy LIST L3
check yyy K L3
check yyy L3 L3
check true
check done 17 L1:       inc L3
check 17 line .entry LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 2check done 17 .entry LOOP

check 17 line           bne LOOP
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check isDataStatement 5check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check command #2 10
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check operand L
check stat = 5
check command!
check temp value = LOOP
check
check got to extractlabel
check 21 bne LOOP
check 23: this should be the command: b 0
check 23: this should be the command: bn 1
check 23: this should be the command: bne 2
check 22 10
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check yyy LOOP LOOP
check true
check done 17 bne LOOP
check 17 line END:      stop
 read successfully.
check that we're in getStatementTypeOfSentencecheck
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check command #2 15
check good command
check isDataStatement 5check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check command #2 15
check good command
check got to extractlabel






 check!!!!!!!!!!!!!!!!!!!






check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check
check got to extractlabel
check 21 stop
check 23: this should be the command: s 0
check 23: this should be the command: st 1
check 23: this should be the command: sto 2
check 23: this should be the command: stop 3
check 22 15
check done 17 END:      stop
check 17 line .define len = 4
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 4check done 17 .define len = 4

check 17 line STR: .string "abcdef"
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 1check done 17 STR: .string "abcdef"
check 17 line LIST: .data 6, -9, len
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 0check done 17 LIST: .data 6, -9, len

check 17 line K: .data 22
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 0check done 17 K: .data 22

check 17 line .extern L3
 read successfully.
check that we're in getStatementTypeOfSentencecheck isDataStatement 3check done 17 .extern L3

check 17 line
 read successfully.
check done 17

check 17 line ;[forum] fix for solution in line 108 00000000101000 --> ****%%*
 read successfully.
check done 17 ;[forum] fix for solution in line 108 00000000101000 --> ****%%*

check 17 line ;[forum] fix for solution in line 117 00000000001000 --> *****%*
 read successfully.
check done 17 ;[forum] fix for solution in line 117 00000000001000 --> *****%*

check got here
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check yyy LIST LIST
check true
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check yyy LOOP LOOP
check true
check done external
check filename in createObjectFile:Test1.as.ob
check 9 about to openTest1.as.ob
check 10 we're in check_if_file_exists, assume Test1.as.ob full dir
check 11 able to access Test1.as.ob
check 13 file exists, opening Test1.as.ob
check code segment = 25

 check itterator = 0
check here's the line's bmc:
00000000111000

 check itterator = 1
check here's the line's bmc:
01100000

 Error:There is a problem with the translation to 4 base
 at line 25

 check itterator = 2
check here's the line's bmc:
00001000010010

 check itterator = 3
check here's the line's bmc:
00000000001010

 check itterator = 4
check here's the line's bmc:
00001001000100

 check itterator = 5
check here's the line's bmc:
00000000000001

 check itterator = 6
check here's the line's bmc:
00001100000000

 check itterator = 7
check here's the line's bmc:
11111111101100

 check itterator = 8
check here's the line's bmc:
00000011111100

 check itterator = 9
check here's the line's bmc:
00110000

 Error:There is a problem with the translation to 4 base
 at line 25

 check itterator = 10
check here's the line's bmc:
00000000101000

 check itterator = 11
check here's the line's bmc:
00000111110110

 check itterator = 12
check here's the line's bmc:
00000000000000

 check itterator = 13
check here's the line's bmc:
00000111110110

 check itterator = 14
check here's the line's bmc:
00000000000000

 check itterator = 15
check here's the line's bmc:
00000001010000

 check itterator = 16
check here's the line's bmc:
00001000011110

 check itterator = 17
check here's the line's bmc:
00000000001000

 check itterator = 18
check here's the line's bmc:
00001010000100

 check itterator = 19
check here's the line's bmc:
00000000000001

 check itterator = 20
check here's the line's bmc:
00000111000100

 check itterator = 21
check here's the line's bmc:
00000000000001

 check itterator = 22
check here's the line's bmc:
00001010000100

 check itterator = 23
check here's the line's bmc:
00000110100010

 check itterator = 24
check here's the line's bmc:
00001111000000
check walker is not null
check filename in createObjectFile:Test1.as.ob
The fileName 0x1f25600 is not null
check good file close!
check WTF
check close phase2
check phase2 done
check got to list destroy
check got to list destroy

avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as > /mnt/c/Users/avivk/Maman14_CheckTest4
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as > /mnt/c/Users/avivk/Maman14_CheckTest4
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
src/modules/CodeSegement.c: In function �addOperandValueToCodeSection�:
src/modules/CodeSegement.c:273:16: warning: format �%s� expects a matching �char *� argument [-Wformat=]         printf("check here's the operand's list of index: %s %s\n",indexOperands->value);
                ^
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as > /mnt/c/Users/avivk/Maman14_CheckTest4
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
src/modules/CodeSegement.c: In function �addOperandValueToCodeSection�:
src/modules/CodeSegement.c:275:13: warning: unused variable �indexLabelAddress� [-Wunused-variable]
         int indexLabelAddress;
             ^
In file included from src/modules/Analyzer.h:5:0,
                 from src/modules/CodeSegement.h:4,
                 from src/modules/CodeSegement.c:1:
src/modules/CodeSegement.c:287:82: error: �indexLabel� undeclared (first use in this function)
             ERROR_PROGRAM(("Unknown symbol %s is a part of the index statement", indexLabel));
                                                                                  ^
src/modules/../utils/Error.h:10:64: note: in definition of macro �ERROR_PROGRAM�
 #define ERROR_PROGRAM(printfArgs); printf("\n Error:"); printf printfArgs; printf(" at line %d \n", cur                                                                ^
src/modules/CodeSegement.c:287:82: note: each undeclared identifier is reported only once for each function it appears in
             ERROR_PROGRAM(("Unknown symbol %s is a part of the index statement", indexLabel));
                                                                                  ^
src/modules/../utils/Error.h:10:64: note: in definition of macro �ERROR_PROGRAM�
 #define ERROR_PROGRAM(printfArgs); printf("\n Error:"); printf printfArgs; printf(" at line %d \n", cur                                                                ^
src/modules/CodeSegement.c:303:9: error: �indexLabelAddress� undeclared (first use in this function)
         indexLabelAddress = symbol->address;
         ^
src/modules/CodeSegement.c:310:24: error: �indexOperands� undeclared (first use in this function)
         if (!(isnumber(indexOperands->value))) {
                        ^
src/modules/CodeSegement.c: At top level:
src/modules/CodeSegement.c:332:5: error: expected identifier or �(� before �else�
     else
     ^
src/modules/CodeSegement.c:360:5: warning: data definition has no type or storage class
     codeSection[IC] = concat(value, decimal_to_binaryString(encoding_type, COMMAND_ARE_BITS_LENGTH));
     ^
src/modules/CodeSegement.c:360:5: warning: type defaults to �int� in declaration of �codeSection� [-Wimplicit-int]
src/modules/CodeSegement.c:360:5: error: variably modified �codeSection� at file scope
src/modules/CodeSegement.c:360:5: error: conflicting types for �codeSection�
src/modules/CodeSegement.c:23:15: note: previous declaration of �codeSection� was here
 static char** codeSection;
               ^
src/modules/CodeSegement.c:360:30: error: �value� undeclared here (not in a function)
     codeSection[IC] = concat(value, decimal_to_binaryString(encoding_type, COMMAND_ARE_BITS_LENGTH));
                              ^
src/modules/CodeSegement.c:360:61: error: �encoding_type� undeclared here (not in a function)
     codeSection[IC] = concat(value, decimal_to_binaryString(encoding_type, COMMAND_ARE_BITS_LENGTH));
                                                             ^
src/modules/CodeSegement.c:361:7: error: expected �=�, �,�, �;�, �asm� or �__attribute__� before �++� token
     IC++;
       ^
src/modules/CodeSegement.c:362:1: error: expected identifier or �(� before �}� token
 }
 ^
Makefile:20: recipe for target 'CodeSegement.o' failed
make: *** [CodeSegement.o] Error 1
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ makemake
makemake: command not found
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as > /mnt/c/Users/avivk/Maman14_CheckTest4
Segmentation fault (core dumped)
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
src/modules/CodeSegement.c: In function �addOperandValueToCodeSection�:
src/modules/CodeSegement.c:312:13: warning: "/*" within comment [-Wcomment]
             /** in case that there's a macro inside the index parentheses  */
             ^
src/modules/CodeSegement.c:315:13: warning: "/*" within comment [-Wcomment]
             /** get the macro's number*/
             ^
src/modules/CodeSegement.c:325:13: warning: "/*" within comment [-Wcomment]
             /** in case that there value inside the index parentheses is regular number */
             ^
src/modules/CodeSegement.c:276:22: warning: variable �indexOperands� set but not used [-Wunused-but-set-variable]
         OperandNode *indexOperands;
                      ^
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as > /mnt/c/Users/avivk/Maman14_CheckTest4
Segmentation fault (core dumped)
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
src/modules/CodeSegement.c: In function �addOperandValueToCodeSection�:
src/modules/CodeSegement.c:316:13: warning: "/*" within comment [-Wcomment]
             /** in case that there's a macro inside the index parentheses  */
             ^
src/modules/CodeSegement.c:319:13: warning: "/*" within comment [-Wcomment]
             /** get the macro's number*/
             ^
src/modules/CodeSegement.c:329:13: warning: "/*" within comment [-Wcomment]
             /** in case that there value inside the index parentheses is regular number */
             ^
src/modules/CodeSegement.c:280:22: warning: variable �indexOperands� set but not used [-Wunused-but-set-variable]
         OperandNode *indexOperands;
                      ^
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as > /mnt/c/Users/avivk/Maman14_CheckTest4
Segmentation fault (core dumped)
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ git diff
diff --git a/Test1.asmake b/Test1.asmake
deleted file mode 100644
index e69de29..0000000
diff --git a/Test1.asmake.as b/Test1.asmake.as
deleted file mode 100644
index e69de29..0000000
diff --git a/make b/make
deleted file mode 100644
index e69de29..0000000
diff --git a/src/modules/CodeSegement.c b/src/modules/CodeSegement.c
index 3622044..736cec4 100644
--- a/src/modules/CodeSegement.c
+++ b/src/modules/CodeSegement.c
@@ -4,7 +4,7 @@ void addToCodeSection(CommandStatement cmd);
 void addOperandValueToCodeSection(OperandNode* operand, OperandPosition operandPos);
 void addOperandsValuesToCodeSection(OperandNode* operandsList);
 /**
- * Go through the operands list, and check wether all the operands match the allowed operands defined by the given CMD, print error for any unallowed operand
+ * Go through the operands list, and check weather all the operands match the allowed operands defined by the given CMD, print error for any unallowed operand
  * @param operandsList
  * @param cmd
  */
@@ -153,7 +153,6 @@ void addStatementToCodeSegment(char* statement){
     OperandNode *operandsList;
     CommandDescriptor *descriptor;
     CommandStatement command;
-    OperandNode* indexList;
     char* label;
     COMMANDS commandEnum;
     int operandsCount;
@@ -182,11 +181,7 @@ void addStatementToCodeSegment(char* statement){
             addToCodeSection(command);
             break;
         case 1:
-            indexList = NULL;
-            if(operandsList->type == INDEX_OPERAND){
-                indexList = getOperandListOfIndexOperand(operandsList->value);
-            }
-            command = buildCommandStatement(NO_OPERAND, operandsList->type, commandEnum, ABSOLUTE, indexList);
+            command = buildCommandStatement(NO_OPERAND, operandsList->type, commandEnum, ABSOLUTE, NULL);

             break;
         case 2:
@@ -218,17 +213,26 @@ void addOperandsValuesToCodeSection(OperandNode* operandsList){
             char *registerTwoValue;

             registerOneValue = decimal_to_binaryString(getRegisterNumberOfOperand(operandsList), COMMAND_REGISTER_LENGTH);
+            printf("check registerOneValue:%s\n", registerOneValue);
             registerTwoValue = decimal_to_binaryString(getRegisterNumberOfOperand(operandsList->next), COMMAND_REGISTER_LENGTH);
+            printf("check registerTwoValue:%s\n", registerTwoValue);
             /** registers are absolute encoded */
             encoding_type = ABSOLUTE;
             codeSection[IC] = concat(concat(registerOneValue, registerTwoValue),decimal_to_binaryString(encoding_type, COMMAND_ARE_BITS_LENGTH));
+            printf("check codeSection[IC]: %s\n", codeSection[IC]);
             IC++;
             return;
         }
+        else if(operandsList->type == INDEX_OPERAND && operandsList->type == INDEX_OPERAND)
+        {
+
+        }

         /** two operands different types, add each of them, first operand is treated as src operand, second as the target operand */
         addOperandValueToCodeSection(operandsList, SRC_OPERAND);
+        printf("check operandsList on addOperandsValuesToCodeSection: %s\n", operandsList->value);
         addOperandValueToCodeSection(operandsList->next, TARGET_OPERAND);
+        printf("check operandsList (next) on addOperandsValuesToCodeSection: %s\n", operandsList->next->value);
         return;
     }

@@ -240,72 +244,121 @@ void addOperandValueToCodeSection(OperandNode* operand, OperandPosition position
     STATEMENT_ENCODING_TYPE encoding_type;
     Symbol* symbol;
     char *value;
-    if(operand->type == DIRECT_VALUE_OPERAND){
-        /** direct values do not need to be reallocted they are absolute */
+    if(operand->type == DIRECT_VALUE_OPERAND)
+    { /** addressing method type 1*/
+        /** direct values  do not need to be reallocated they are absolute */
         encoding_type = ABSOLUTE;
-        /** direct value of command statements, are gaurnteed to be numbers we can use atoi safely */
-        value = decimal_to_binaryString(atoi(operand->value), COMMAND_VALUE_LENGTH);
-    } else if(operand->type == REGISTER_OPERAND){
+        /** direct value of command statements may be numbers or macro, therefore we need to check that the value exists and convert it to number */
+        if (!isnumber(operand->value) && validateLabel(operand->value) && searchForSymbolByLabel(operand->value)->feature == macro)
+        {
+            value = decimal_to_binaryString(getSymbolAddress(operand->value), COMMAND_VALUE_LENGTH);
+        }
+        else
+        {
+            value = decimal_to_binaryString(atoi(operand->value), COMMAND_VALUE_LENGTH);
+        }
+        printf("check here's the direct operand operandNode value: %s\n", operand->value);
+        printf("check direct operand bmc value:%s\n", value);
+    }
+    else if(operand->type == REGISTER_OPERAND)
+    { /** addressing method type 3*/
         encoding_type = ABSOLUTE;
         if(position == SRC_OPERAND){
-            /** src register operands should encode the binary value of register number, and padd the value with 6 zeros */
+            /** src register operands should encode the binary value of register number, and pad the value with 6 zeros */
             value = concat(decimal_to_binaryString(getRegisterNumberOfOperand(operand), COMMAND_REGISTER_LENGTH), decimal_to_binaryString(0, COMMAND_REGISTER_LENGTH));
+            printf("check src register operand value:%s\n", value);
         } else {
-            /** target register operands should start wuth 6 zeros, and then the binary value of the register value */
+            /** target register operands should start with 6 zeros, and then the binary value of the register value */
             value = concat(decimal_to_binaryString(0, COMMAND_REGISTER_LENGTH), decimal_to_binaryString(getRegisterNumberOfOperand(operand), COMMAND_REGISTER_LENGTH));
+            printf("check dest register operand value:%s\n", value);
         }
-    } else if(operand->type == INDEX_OPERAND){
+    }
+    else if(operand->type == INDEX_OPERAND)
+    { /** addressing method type 2*/
         char *indexLabel;
         int indexLabelAddress;
         OperandNode *indexOperands;
         indexOperands = getOperandListOfIndexOperand(operand->value);
+        /*printf("check here's the operand's list of index: %s\n",indexOperands->value);*/
         indexLabel = extractIndexOperandLabel(operand->value);
-
-        /** find the index label in the symbols table */
+        printf("check here's the indexLabel: %s\n", indexLabel);
         printf("check %s", indexLabel);
-
-        if(!(isnumber(indexLabel)))
-                       symbol = searchForSymbolByLabel(indexLabel);
+
+        /** find the index label in the symbols table */
+        symbol = searchForSymbolByLabel(indexLabel);
+
         if(symbol == NULL){
-            ERROR_PROGRAM(("Unknown symbol %s in index statement", indexLabel));
+            ERROR_PROGRAM(("Unknown symbol %s is a part of the index statement", indexLabel));
             return;
         }
+        printf("check here's the label that was found: %s %d \n", symbol->label, symbol->feature);
+
         /** if it an external symbol, we encode a different ARE bits, as it  external not relocatable */
         if(symbol->feature == ext){
             encoding_type = EXTERNAL;
             /** add the external usage to the external symbols usage list*/
             addExternalStatementUsage(symbol->label, IC + MEMOERY_START_ADDRESS);
-        } else {
+        }
+        else
+        {
             encoding_type = RELOCATEABLE;
         }
+        /***/
         indexLabelAddress = symbol->address;
+        printf("check the label's address:%d\n", symbol->address);
         /** add the index label first */
         codeSection[IC] = concat(decimal_to_binaryString(indexLabelAddress, COMMAND_VALUE_LENGTH), decimal_to_binaryString(encoding_type, COMMAND_ARE_BITS_LENGTH));
+        printf("check the label's codeSection[IC]:%s\n", codeSection[IC]);
         IC++;
         /** add the index operands */
-        addOperandsValuesToCodeSection(indexOperands);
+        /*
+        if (!(isnumber(indexOperands->value))) {
+            /** in case that there's a macro inside the index parentheses  */
+            /** macro, such as direct values, do not need to be reallocated they are absolute */
+            /*encoding_type = ABSOLUTE;
+            /** get the macro's number*/
+            /*if (validateLabel(indexOperands->value) && searchForSymbolByLabel(indexOperands->value)->feature == macro)
+            {
+                value = decimal_to_binaryString(getSymbolAddress(indexOperands->value), COMMAND_VALUE_LENGTH);
+            }
+            printf("check here's the index operand operandNode value (should be macro): %s\n", indexOperands->value);
+            printf("check direct operand bmc value:%s\n", value);
+        }
+        else
+        {
+            /** in case that there value inside the index parentheses is regular number */
+            /*value = decimal_to_binaryString(atoi(operand->value), COMMAND_VALUE_LENGTH);
+        }
+
+        codeSection[IC] = concat(decimal_to_binaryString(indexLabelAddress, COMMAND_VALUE_LENGTH), decimal_to_binaryString(encoding_type, COMMAND_ARE_BITS_LENGTH));
+        addOperandsValuesToCodeSection(indexOperands);*/
         return;
-    } else{  /** then its a label operand */
+    }
+    else
+    {  /** then its a label operand */
         Symbol* symbol;
+
         /** find the label in the symbols table */
         if(!(isnumber(operand->value)))
         {
-                       symbol = searchForSymbolByLabel(operand->value);
-
-                       if(symbol == NULL){
-                               ERROR_PROGRAM(("Unknown symbol %s", operand->value));
-                               return;
-                       }
-
-        /** if it an external symbol, we encode a different ARE bits, as it  external not relocatable */
-                       if(symbol->feature == ext){
-                               encoding_type = EXTERNAL;
-                               addExternalStatementUsage(symbol->label, IC + MEMOERY_START_ADDRESS);
-                       } else {
-                               encoding_type = RELOCATEABLE;
-                       }
-               }
-               value = decimal_to_binaryString(symbol->address, COMMAND_VALUE_LENGTH);
+            symbol = searchForSymbolByLabel(operand->value);
+            if(symbol == NULL)
+            {
+                ERROR_PROGRAM(("Unknown symbol %s", operand->value));
+                return;
+            }
+            /** if it an external symbol, we encode a different ARE bits, as it  external not relocatable */
+            if(symbol->feature == ext)
+            {
+                encoding_type = EXTERNAL;
+                addExternalStatementUsage(symbol->label, IC + MEMOERY_START_ADDRESS);
+            }
+            else
+            {
+                encoding_type = RELOCATEABLE;
+            }
+        }
+        value = decimal_to_binaryString(symbol->address, COMMAND_VALUE_LENGTH);
     }

     /** combine statement and the encoding type bits */
diff --git a/src/modules/CodeSegement.h b/src/modules/CodeSegement.h
index 67fe137..1709b85 100644
--- a/src/modules/CodeSegement.h
+++ b/src/modules/CodeSegement.h
@@ -9,7 +9,7 @@

 #define COMMAND_VALUE_LENGTH 12
 #define COMMAND_ARE_BITS_LENGTH 2
-#define COMMAND_REGISTER_LENGTH 6
+#define COMMAND_REGISTER_LENGTH 3

 /** returns the current count of command instructions */
 int getInstructionsCount();
diff --git a/src/modules/CommandBuilder.c b/src/modules/CommandBuilder.c
index 668be20..894e767 100644
--- a/src/modules/CommandBuilder.c
+++ b/src/modules/CommandBuilder.c
@@ -30,6 +30,12 @@ CommandStatement buildCommandStatement(OperandType srcOperandType, OperandType d
     command->op_code_3 = commandCode[2];
     command->op_code_4 = commandCode[3];

+    command->not_in_use_1 = 0;
+    command->not_in_use_2 = 0;
+    command->not_in_use_3 = 0;
+    command->not_in_use_4 = 0;
+
+    /* index operand separate coding is not relevant
     if(indexOperandsList == NULL){
         command->not_in_use_1 = 0;
         command->not_in_use_2 = 0;
@@ -52,6 +58,7 @@ CommandStatement buildCommandStatement(OperandType srcOperandType, OperandType d
         command->not_in_use_3 = indexParam2Value[0];
         command->not_in_use_4 = indexParam2Value[1];
     }
+     */
     return  *command;
 }

diff --git a/src/phase2.c b/src/phase2.c
index e383e0a..76d58ea 100644
--- a/src/phase2.c
+++ b/src/phase2.c
@@ -57,13 +57,13 @@ void doPhase2(char* fileName)
             printf("didn't output files for file %s, because errors were found. see the errors output for more information.", fileName);
             return;
         }
-
         createEnteriesFile(fileName);
         createExternalsFile(fileName);
         createObjectFile(fileName, codeSegmentSize, dataSegmentSize);
-
+
         printf("check WTF \n");
-
+
+        /*
         if (fileToAssembler != NULL)
                {
                        printf("check closed corectly \n");
@@ -73,7 +73,8 @@ void doPhase2(char* fileName)
                                printf("check went good \n");
                        }
                }
-
+
+        */
         printf("check close phase2 \n");
     }

@@ -209,6 +210,7 @@ void createObjectFile(char *fileName, int codeSegmentSize, int dataSegmentSize)
     {
                printf("\n check itterator = %d \n", itteratorIndex);
        /** prints each line to the weird binary value */
+       printf("check here's the line's bmc:\n%s\n",codeSegment[itteratorIndex]);
         from_binary_machine_code_to_fourth_base(codeSegment[itteratorIndex], &decimalAddress, file);

         itteratorIndex++;
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ git diff
diff --git a/Test1.asmake b/Test1.asmake
deleted file mode 100644
index e69de29..0000000
diff --git a/Test1.asmake.as b/Test1.asmake.as
deleted file mode 100644
index e69de29..0000000
diff --git a/make b/make
deleted file mode 100644
index e69de29..0000000
diff --git a/src/modules/CodeSegement.c b/src/modules/CodeSegement.c
index 3622044..736cec4 100644
--- a/src/modules/CodeSegement.c
+++ b/src/modules/CodeSegement.c
@@ -4,7 +4,7 @@ void addToCodeSection(CommandStatement cmd);
 void addOperandValueToCodeSection(OperandNode* operand, OperandPosition operandPos);
 void addOperandsValuesToCodeSection(OperandNode* operandsList);
 /**
- * Go through the operands list, and check wether all the operands match the allowed operands defined by the given CMD, print error for any unallowed operand
+ * Go through the operands list, and check weather all the operands match the allowed operands defined by the given CMD, print error for any unallowed operand
  * @param operandsList
  * @param cmd
  */
@@ -153,7 +153,6 @@ void addStatementToCodeSegment(char* statement){
     OperandNode *operandsList;
     CommandDescriptor *descriptor;
     CommandStatement command;
-    OperandNode* indexList;
     char* label;
     COMMANDS commandEnum;
     int operandsCount;
@@ -182,11 +181,7 @@ void addStatementToCodeSegment(char* statement){
             addToCodeSection(command);
             break;
         case 1:
-            indexList = NULL;
-            if(operandsList->type == INDEX_OPERAND){
-                indexList = getOperandListOfIndexOperand(operandsList->value);
-            }
-            command = buildCommandStatement(NO_OPERAND, operandsList->type, commandEnum, ABSOLUTE, indexList);
+            command = buildCommandStatement(NO_OPERAND, operandsList->type, commandEnum, ABSOLUTE, NULL);

             break;
         case 2:
@@ -218,17 +213,26 @@ void addOperandsValuesToCodeSection(OperandNode* operandsList){
             char *registerTwoValue;

             registerOneValue = decimal_to_binaryString(getRegisterNumberOfOperand(operandsList), COMMAND_REGISTER_LENGTH);
+            printf("check registerOneValue:%s\n", registerOneValue);
             registerTwoValue = decimal_to_binaryString(getRegisterNumberOfOperand(operandsList->next), COMMAND_REGISTER_LENGTH);
+            printf("check registerTwoValue:%s\n", registerTwoValue);
             /** registers are absolute encoded */
             encoding_type = ABSOLUTE;
             codeSection[IC] = concat(concat(registerOneValue, registerTwoValue),decimal_to_binaryString(encoding_type, COMMAND_ARE_BITS_LENGTH));
+            printf("check codeSection[IC]: %s\n", codeSection[IC]);
             IC++;
             return;
         }
+        else if(operandsList->type == INDEX_OPERAND && operandsList->type == INDEX_OPERAND)
+        {
+
+        }

         /** two operands different types, add each of them, first operand is treated as src operand, second as the target operand */
         addOperandValueToCodeSection(operandsList, SRC_OPERAND);
+        printf("check operandsList on addOperandsValuesToCodeSection: %s\n", operandsList->value);
         addOperandValueToCodeSection(operandsList->next, TARGET_OPERAND);
+        printf("check operandsList (next) on addOperandsValuesToCodeSection: %s\n", operandsList->next->value);
         return;
     }

@@ -240,72 +244,121 @@ void addOperandValueToCodeSection(OperandNode* operand, OperandPosition position
     STATEMENT_ENCODING_TYPE encoding_type;
     Symbol* symbol;
     char *value;
-    if(operand->type == DIRECT_VALUE_OPERAND){
-        /** direct values do not need to be reallocted they are absolute */
+    if(operand->type == DIRECT_VALUE_OPERAND)
+    { /** addressing method type 1*/
+        /** direct values  do not need to be reallocated they are absolute */
         encoding_type = ABSOLUTE;
-        /** direct value of command statements, are gaurnteed to be numbers we can use atoi safely */
-        value = decimal_to_binaryString(atoi(operand->value), COMMAND_VALUE_LENGTH);
-    } else if(operand->type == REGISTER_OPERAND){
+        /** direct value of command statements may be numbers or macro, therefore we need to check that the value exists and convert it to number */
+        if (!isnumber(operand->value) && validateLabel(operand->value) && searchForSymbolByLabel(operand->value)->feature == macro)
+        {
+            value = decimal_to_binaryString(getSymbolAddress(operand->value), COMMAND_VALUE_LENGTH);
+        }
+        else
+        {
+            value = decimal_to_binaryString(atoi(operand->value), COMMAND_VALUE_LENGTH);
+        }
+        printf("check here's the direct operand operandNode value: %s\n", operand->value);
+        printf("check direct operand bmc value:%s\n", value);
+    }
+    else if(operand->type == REGISTER_OPERAND)
+    { /** addressing method type 3*/
         encoding_type = ABSOLUTE;
         if(position == SRC_OPERAND){
-            /** src register operands should encode the binary value of register number, and padd the value with 6 zeros */
+            /** src register operands should encode the binary value of register number, and pad the value with 6 zeros */
             value = concat(decimal_to_binaryString(getRegisterNumberOfOperand(operand), COMMAND_REGISTER_LENGTH), decimal_to_binaryString(0, COMMAND_REGISTER_LENGTH));
+            printf("check src register operand value:%s\n", value);
         } else {
-            /** target register operands should start wuth 6 zeros, and then the binary value of the register value */
+            /** target register operands should start with 6 zeros, and then the binary value of the register value */
             value = concat(decimal_to_binaryString(0, COMMAND_REGISTER_LENGTH), decimal_to_binaryString(getRegisterNumberOfOperand(operand), COMMAND_REGISTER_LENGTH));
+            printf("check dest register operand value:%s\n", value);
         }
-    } else if(operand->type == INDEX_OPERAND){
+    }
+    else if(operand->type == INDEX_OPERAND)
+    { /** addressing method type 2*/
         char *indexLabel;
         int indexLabelAddress;
         OperandNode *indexOperands;
         indexOperands = getOperandListOfIndexOperand(operand->value);
+        /*printf("check here's the operand's list of index: %s\n",indexOperands->value);*/
         indexLabel = extractIndexOperandLabel(operand->value);
-
-        /** find the index label in the symbols table */
+        printf("check here's the indexLabel: %s\n", indexLabel);
         printf("check %s", indexLabel);
-
-        if(!(isnumber(indexLabel)))
-                       symbol = searchForSymbolByLabel(indexLabel);
+
+        /** find the index label in the symbols table */
+        symbol = searchForSymbolByLabel(indexLabel);
+
         if(symbol == NULL){
-            ERROR_PROGRAM(("Unknown symbol %s in index statement", indexLabel));
+            ERROR_PROGRAM(("Unknown symbol %s is a part of the index statement", indexLabel));
             return;
         }
+        printf("check here's the label that was found: %s %d \n", symbol->label, symbol->feature);
+
         /** if it an external symbol, we encode a different ARE bits, as it  external not relocatable */
         if(symbol->feature == ext){
             encoding_type = EXTERNAL;
             /** add the external usage to the external symbols usage list*/
             addExternalStatementUsage(symbol->label, IC + MEMOERY_START_ADDRESS);
-        } else {
+        }
+        else
+        {
             encoding_type = RELOCATEABLE;
         }
+        /***/
         indexLabelAddress = symbol->address;
+        printf("check the label's address:%d\n", symbol->address);
         /** add the index label first */
         codeSection[IC] = concat(decimal_to_binaryString(indexLabelAddress, COMMAND_VALUE_LENGTH), decimal_to_binaryString(encoding_type, COMMAND_ARE_BITS_LENGTH));
+        printf("check the label's codeSection[IC]:%s\n", codeSection[IC]);
         IC++;
         /** add the index operands */
-        addOperandsValuesToCodeSection(indexOperands);
+        /*
+        if (!(isnumber(indexOperands->value))) {
+            /** in case that there's a macro inside the index parentheses  */
+            /** macro, such as direct values, do not need to be reallocated they are absolute */
+            /*encoding_type = ABSOLUTE;
+            /** get the macro's number*/
+            /*if (validateLabel(indexOperands->value) && searchForSymbolByLabel(indexOperands->value)->feature == macro)
+            {
+                value = decimal_to_binaryString(getSymbolAddress(indexOperands->value), COMMAND_VALUE_LENGTH);
+            }
+            printf("check here's the index operand operandNode value (should be macro): %s\n", indexOperands->value);
+            printf("check direct operand bmc value:%s\n", value);
+        }
+        else
+        {
+            /** in case that there value inside the index parentheses is regular number */
+            /*value = decimal_to_binaryString(atoi(operand->value), COMMAND_VALUE_LENGTH);
+        }
+
+        codeSection[IC] = concat(decimal_to_binaryString(indexLabelAddress, COMMAND_VALUE_LENGTH), decimal_to_binaryString(encoding_type, COMMAND_ARE_BITS_LENGTH));
+        addOperandsValuesToCodeSection(indexOperands);*/
         return;
-    } else{  /** then its a label operand */
+    }
+    else
+    {  /** then its a label operand */
         Symbol* symbol;
+
         /** find the label in the symbols table */
         if(!(isnumber(operand->value)))
         {
-                       symbol = searchForSymbolByLabel(operand->value);
-
-                       if(symbol == NULL){
-                               ERROR_PROGRAM(("Unknown symbol %s", operand->value));
-                               return;
-                       }
-
-        /** if it an external symbol, we encode a different ARE bits, as it  external not relocatable */
-                       if(symbol->feature == ext){
-                               encoding_type = EXTERNAL;
-                               addExternalStatementUsage(symbol->label, IC + MEMOERY_START_ADDRESS);
-                       } else {
-                               encoding_type = RELOCATEABLE;
-                       }
-               }
-               value = decimal_to_binaryString(symbol->address, COMMAND_VALUE_LENGTH);
+            symbol = searchForSymbolByLabel(operand->value);
+            if(symbol == NULL)
+            {
+                ERROR_PROGRAM(("Unknown symbol %s", operand->value));
+                return;
+            }
+            /** if it an external symbol, we encode a different ARE bits, as it  external not relocatable */
+            if(symbol->feature == ext)
+            {
+                encoding_type = EXTERNAL;
+                addExternalStatementUsage(symbol->label, IC + MEMOERY_START_ADDRESS);
+            }
+            else
+            {
+                encoding_type = RELOCATEABLE;
+            }
+        }
+        value = decimal_to_binaryString(symbol->address, COMMAND_VALUE_LENGTH);
     }

     /** combine statement and the encoding type bits */
diff --git a/src/modules/CodeSegement.h b/src/modules/CodeSegement.h
index 67fe137..1709b85 100644
--- a/src/modules/CodeSegement.h
+++ b/src/modules/CodeSegement.h
@@ -9,7 +9,7 @@

 #define COMMAND_VALUE_LENGTH 12
 #define COMMAND_ARE_BITS_LENGTH 2
-#define COMMAND_REGISTER_LENGTH 6
+#define COMMAND_REGISTER_LENGTH 3

 /** returns the current count of command instructions */
 int getInstructionsCount();
diff --git a/src/modules/CommandBuilder.c b/src/modules/CommandBuilder.c
index 668be20..894e767 100644
--- a/src/modules/CommandBuilder.c
+++ b/src/modules/CommandBuilder.c
@@ -30,6 +30,12 @@ CommandStatement buildCommandStatement(OperandType srcOperandType, OperandType d
     command->op_code_3 = commandCode[2];
     command->op_code_4 = commandCode[3];

+    command->not_in_use_1 = 0;
+    command->not_in_use_2 = 0;
+    command->not_in_use_3 = 0;
+    command->not_in_use_4 = 0;
+
+    /* index operand separate coding is not relevant
     if(indexOperandsList == NULL){
         command->not_in_use_1 = 0;
         command->not_in_use_2 = 0;
@@ -52,6 +58,7 @@ CommandStatement buildCommandStatement(OperandType srcOperandType, OperandType d
         command->not_in_use_3 = indexParam2Value[0];
         command->not_in_use_4 = indexParam2Value[1];
     }
+     */
     return  *command;
 }

diff --git a/src/phase2.c b/src/phase2.c
index e383e0a..76d58ea 100644
--- a/src/phase2.c
+++ b/src/phase2.c
@@ -57,13 +57,13 @@ void doPhase2(char* fileName)
             printf("didn't output files for file %s, because errors were found. see the errors output for more information.", fileName);
             return;
         }
-
         createEnteriesFile(fileName);
         createExternalsFile(fileName);
         createObjectFile(fileName, codeSegmentSize, dataSegmentSize);
-
+
         printf("check WTF \n");
-
+
+        /*
         if (fileToAssembler != NULL)
                {
                        printf("check closed corectly \n");
@@ -73,7 +73,8 @@ void doPhase2(char* fileName)
                                printf("check went good \n");
                        }
                }
-
+
+        */
         printf("check close phase2 \n");
     }

@@ -209,6 +210,7 @@ void createObjectFile(char *fileName, int codeSegmentSize, int dataSegmentSize)
     {
                printf("\n check itterator = %d \n", itteratorIndex);
        /** prints each line to the weird binary value */
+       printf("check here's the line's bmc:\n%s\n",codeSegment[itteratorIndex]);
         from_binary_machine_code_to_fourth_base(codeSegment[itteratorIndex], &decimalAddress, file);

         itteratorIndex++;
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ git commit -am "CodeSegement.c: addToCodeSection() - add comment. addStatementToCodeSegment() - change the coding to without index since the 4 last bits should be 0.addOperandsValuesToCodeSection(): add aomments and checks, addOperandValueToCodeSection() - add case of DIRECT_VALUE_OPERAND that is actually a macro, add checks in the index part, rephrase errors and more changes related to the index. CodeSegement.h: change the last 4 digit's initial value since they are 0 in any case.   "
[master 28013ac] CodeSegement.c: addToCodeSection() - add comment. addStatementToCodeSegment() - change the coding to without index since the 4 last bits should be 0.addOperandsValuesToCodeSection(): add aomments and checks, addOperandValueToCodeSection() - add case of DIRECT_VALUE_OPERAND that is actually a macro, add checks in the index part, rephrase errors and more changes related to the index. CodeSegement.h: change the last 4 digit's initial value since they are 0 in any case.
 7 files changed, 107 insertions(+), 45 deletions(-)
 delete mode 100644 Test1.asmake
 delete mode 100644 Test1.asmake.as
 delete mode 100644 make
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ git pull
remote: Enumerating objects: 74, done.
remote: Counting objects: 100% (74/74), done.
remote: Compressing objects: 100% (14/14), done.
remote: Total 46 (delta 33), reused 45 (delta 32), pack-reused 0
Unpacking objects: 100% (46/46), done.
From https://github.com/avivka/Maman14_SecondShot
   97dc93c..03a17e9  master     -> origin/master
Auto-merging src/utils/TextUtils.h
CONFLICT (content): Merge conflict in src/utils/TextUtils.h
Auto-merging src/utils/TextUtils.c
CONFLICT (content): Merge conflict in src/utils/TextUtils.c
Auto-merging src/utils/List.c
Auto-merging src/utils/FileWriter.c
CONFLICT (content): Merge conflict in src/utils/FileWriter.c
Auto-merging src/utils/FileReader.c
CONFLICT (content): Merge conflict in src/utils/FileReader.c
Auto-merging src/utils/Error.h
CONFLICT (content): Merge conflict in src/utils/Error.h
Auto-merging src/phase2.c
CONFLICT (content): Merge conflict in src/phase2.c
Auto-merging src/phase1.c
CONFLICT (content): Merge conflict in src/phase1.c
Auto-merging src/modules/Opearnds.c
CONFLICT (content): Merge conflict in src/modules/Opearnds.c
Auto-merging src/modules/CodeSegement.h
CONFLICT (content): Merge conflict in src/modules/CodeSegement.h
Auto-merging src/modules/CodeSegement.c
CONFLICT (content): Merge conflict in src/modules/CodeSegement.c
Auto-merging src/main.c
CONFLICT (content): Merge conflict in src/main.c
Automatic merge failed; fix conflicts and then commit the result.
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ git commit -am "resolve conflicts"
[master f4e939a] resolve conflicts
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
In file included from src/phase1.h:7:0,
                 from src/main.h:6,
                 from src/main.c:1:
src/modules/CodeSegement.h:56:2: error: #endif without #if
 #endif
  ^
In file included from src/phase2.h:9:0,
                 from src/main.h:7,
                 from src/main.c:1:
src/modules/CodeSegement.h:56:2: error: #endif without #if
 #endif
  ^
src/main.c:3:1: error: expected identifier or �(� before �<<� token
 <<<<<<< HEAD
 ^
src/main.c:15:9: error: invalid suffix "a17e9235e68b601c2bfb97f1422bca28d229fc" on integer constant
 >>>>>>> 03a17e9235e68b601c2bfb97f1422bca28d229fc
         ^
src/main.c:42:9: error: invalid suffix "a17e9235e68b601c2bfb97f1422bca28d229fc" on integer constant
 >>>>>>> 03a17e9235e68b601c2bfb97f1422bca28d229fc
         ^
Makefile:8: recipe for target 'main.o' failed
make: *** [main.o] Error 1
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
src/main.c:3:1: error: expected identifier or �(� before �<<� token
 <<<<<<< HEAD
 ^
src/main.c:15:9: error: invalid suffix "a17e9235e68b601c2bfb97f1422bca28d229fc" on integer constant
 >>>>>>> 03a17e9235e68b601c2bfb97f1422bca28d229fc
         ^
src/main.c:42:9: error: invalid suffix "a17e9235e68b601c2bfb97f1422bca28d229fc" on integer constant
 >>>>>>> 03a17e9235e68b601c2bfb97f1422bca28d229fc
         ^
Makefile:8: recipe for target 'main.o' failed
make: *** [main.o] Error 1
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ git commit -am "resolve conflicts 2"
[master 6342a7a] resolve conflicts 2
 2 files changed, 4 insertions(+), 16 deletions(-)
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
src/modules/CodeSegement.c: In function �addStatementToCodeSegment�:
src/modules/CodeSegement.c:155:20: warning: unused variable �indexList� [-Wunused-variable]
     OperandNode*   indexList    = NULL;
                    ^
src/modules/CodeSegement.c: In function �addOperandValueToCodeSection�:
src/modules/CodeSegement.c:398:13: warning: "/*" within comment [-Wcomment]
             /** in case that there's a macro inside the index parentheses  */
             ^
src/modules/CodeSegement.c:401:13: warning: "/*" within comment [-Wcomment]
             /** get the macro's number*/
             ^
src/modules/CodeSegement.c:411:13: warning: "/*" within comment [-Wcomment]
             /** in case that there value inside the index parentheses is regular number */
             ^
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
src/modules/Opearnds.c: In function �createOperandNode�:
src/modules/Opearnds.c:264:1: error: expected statement before �]� token
 ]
 ^
Makefile:35: recipe for target 'Opearnds.o' failed
make: *** [Opearnds.o] Error 1
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
src/modules/CodeSegement.c: In function �addStatementToCodeSegment�:
src/modules/CodeSegement.c:155:20: warning: unused variable �indexList� [-Wunused-variable]
     OperandNode*   indexList    = NULL;
                    ^
src/modules/CodeSegement.c: In function �addOperandValueToCodeSection�:
src/modules/CodeSegement.c:398:13: warning: "/*" within comment [-Wcomment]
             /** in case that there's a macro inside the index parentheses  */
             ^
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
src/modules/Opearnds.c: In function �createOperandNode�:
src/modules/Opearnds.c:264:1: error: expected statement before �]� token
 ]
 ^
Makefile:35: recipe for target 'Opearnds.o' failed
make: *** [Opearnds.o] Error 1
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
src/modules/CodeSegement.c: In function �addOperandValueToCodeSection�:
src/modules/CodeSegement.c:397:13: warning: "/*" within comment [-Wcomment]
             /** in case that there's a macro inside the index parentheses  */
             ^
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
src/modules/Opearnds.c: In function �createOperandNode�:
src/modules/Opearnds.c:264:1: error: expected statement before �]� token
 ]
 ^
Makefile:35: recipe for target 'Opearnds.o' failed
make: *** [Opearnds.o] Error 1
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
src/modules/Opearnds.c: In function �createOperandNode�:
src/modules/Opearnds.c:264:1: error: expected statement before �]� token
 ]
 ^
Makefile:35: recipe for target 'Opearnds.o' failed
make: *** [Opearnds.o] Error 1
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ git commit -am "fix errors and warnings from the conflict resolving"
[master 1cda377] fix errors and warnings from the conflict resolving
 2 files changed, 3 insertions(+), 5 deletions(-)
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ git pull
Already up-to-date.
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as
check the filename is - Test1

 Begin processing the following file: Test1.as





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 2
check temp value = LIST






 check!!!!!!!!!!!!!!!!!!!






check operand W

check stat = 3
check temp value = W
check 3
check false
check important W 0






 check!!!!!!!!!!!!!!!!!!!






check operand s
check stat = 4
check temp value = sz
check sz
check got here   10
check index = 11
check 13 2
check out of while
check end = 13
check operand = 2
check end = 15
check v = 2
check stat = 4
check headlist good = 1         label = 1       value = sz      check type = 1  value = sz      check type = 0  value = 2       check here's the macro info: sz 2
check 3
check yyy W sz
check false
check important sz 2
check 3
check yyy W MAIN
check yyy sz MAIN
check false
check important MAIN 100






 check!!!!!!!!!!!!!!!!!!!






check operand r ,
check stat = 5
check command!
check temp value = r3



 check got to '[' sign
check ]
check operand L
check stat = 5
check command!
check command 2
check temp value = LIST[sz]
ok
check label = LIST
ok
check 4
ok
check 4check good to go
check 5, 7
!!!!check sz
check stat = 5
check command!
check all good!!!!!!!!!!



check 3
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check false
check important LOOP 104






 check!!!!!!!!!!!!!!!!!!!






check operand W
check stat = 5
check command!
check temp value = W






 check!!!!!!!!!!!!!!!!!!!






check operand #
check stat = 5
check command!
check temp value = -5






 check!!!!!!!!!!!!!!!!!!!






check operand r ,
check stat = 5
check command!
check temp value = r1
check operand r
check stat = 5
check command!
check temp value = r4






 check!!!!!!!!!!!!!!!!!!!









 check got to '[' sign
check ]
check operand S ,
check stat = 5
check command!
check command 2
check temp value = STR[5]



 check got to '[' sign
check ]
check operand S
check stat = 5
check command!
check command 2
check temp value = STR[2]
ok
check label = STR
ok
check 3
ok
check 3check good to go
check 4, 5
!!!!check 5
check stat = 5
check command!
check all good!!!!!!!!!!



ok
check label = STR
ok
check 3
ok
check 3check good to go
check 4, 5
!!!!check 2
check stat = 5
check command!
check all good!!!!!!!!!!









 check!!!!!!!!!!!!!!!!!!!






check operand K ,
check stat = 5
check command!
check temp value = K
check operand #
check stat = 5
check command!
check temp value = sz






 check!!!!!!!!!!!!!!!!!!!






check operand W
check stat = 5
check command!
check temp value = W
check 3
check yyy W L1
check yyy sz L1
check yyy MAIN L1
check yyy LOOP L1
check false
check important L1 120






 check!!!!!!!!!!!!!!!!!!!






check operand L
check stat = 5
check command!
check temp value = L3






 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 2
check temp value = LOOP






 check!!!!!!!!!!!!!!!!!!!






check operand L
check stat = 5
check command!
check temp value = LOOP
check 3
check yyy W END
check yyy sz END
check yyy MAIN END
check yyy LOOP END
check yyy L1 END
check false
check important END 124






 check!!!!!!!!!!!!!!!!!!!












 check!!!!!!!!!!!!!!!!!!!






check operand l
check stat = 4
check temp value = len
check len
check got here   11
check index = 12
check 14 4
check out of while
check end = 14
check operand = 4
check end = 16
check v = 4
check stat = 4
check headlist good = 1         label = 1       value = len     check type = 1  value = len     check type = 0  value = 4       check here's the macro info: len        4
check 3
check yyy W len
check yyy sz len
check yyy MAIN len
check yyy LOOP len
check yyy L1 len
check yyy END len
check false
check important len 4






 check!!!!!!!!!!!!!!!!!!!






check operand "

check stat = 1
check temp value = abcdef
check 3
check yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check false
check important STR 0






 check!!!!!!!!!!!!!!!!!!!






check operand 6 ,
check stat = 0
check temp value = 6
check operand - ,
check stat = 0
check temp value = -9
check operand l

check stat = 0
check yyy W len
check yyy sz len
check yyy MAIN len
check yyy LOOP len
check yyy L1 len
check yyy END len
check yyy len len
check true
check temp value = len
check 3
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check false
check important LIST 7






 check!!!!!!!!!!!!!!!!!!!






check operand 2

check stat = 0
check temp value = 22
check 3
check yyy W K
check yyy sz K
check yyy MAIN K
check yyy LOOP K
check yyy L1 K
check yyy END K
check yyy len K
check yyy STR K
check yyy LIST K
check false
check important K 10






 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 3
check temp value = L3
check 3
check yyy W L3
check yyy sz L3
check yyy MAIN L3
check yyy LOOP L3
check yyy L1 L3
check yyy END L3
check yyy len L3
check yyy STR L3
check yyy LIST L3
check yyy K L3
check false
check important L3 0
check is null 1!
check 24 got to doPhase2
check 14 again open or creation of Test1 was done successfully
this is the IC size:25






 check!!!!!!!!!!!!!!!!!!!






check operand r ,
check stat = 5
check command!
check temp value = r3



 check got to '[' sign
check ]
check operand L
check stat = 5
check command!
check command 2
check temp value = LIST[sz]
check add
check add to code section
check add 2
check 3
check src register operand value:000011000000
check operandsList on addOperandsValuesToCodeSection: r3
check add 2
check 2
ok
check label = LIST
ok
check 4
ok
check 4check good to go
check 5, 7
!!!!check sz
check stat = 5
check command!
check all good!!!!!!!!!!



check not null
check sz 1
check here's the indexLabel: LIST
check 1
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check yyy LIST LIST
check true
check 132
check here's the label that was found: LIST 2
check relocateable
check 132
check the label's address:132
check the label's codeSection[IC]:00001000010010
check ic = 3
check index operands = sz
check add
 check single operand sz
check add 2
check 1
check 2 sz
check yyy W sz
check yyy sz sz
check true
check operandsList (next) on addOperandsValuesToCodeSection: LIST[sz]






 check!!!!!!!!!!!!!!!!!!!






check operand W
check stat = 5
check command!
check temp value = W
check add
 check single operand W
check add 2
check 1
check 2 W
check yyy W W
check true






 check!!!!!!!!!!!!!!!!!!!






check operand #
check stat = 5
check command!
check temp value = -5
check add
 check single operand -5
check add 2
check 0
check direct
check here's the direct operand operandNode value: -5
check direct operand bmc value:111111111011






 check!!!!!!!!!!!!!!!!!!!






check operand r ,
check stat = 5
check command!
check temp value = r1
check operand r
check stat = 5
check command!
check temp value = r4
check add
check 2 registerscheck registerOneValue:000001
check registerTwoValue:000100
check codeSection[IC]: 00000100010000






 check!!!!!!!!!!!!!!!!!!!









 check got to '[' sign
check ]
check operand S ,
check stat = 5
check command!
check command 2
check temp value = STR[5]



 check got to '[' sign
check ]
check operand S
check stat = 5
check command!
check command 2
check temp value = STR[2]
check add
check add to code section
check add 2
check 2
ok
check label = STR
ok
check 3
ok
check 3check good to go
check 4, 5
!!!!check 5
check stat = 5
check command!
check all good!!!!!!!!!!



check not null
check  0
check here's the indexLabel: STR
check 1
check yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check yyy STR STR
check true
check 125
check here's the label that was found: STR 2
check relocateable
check 125
check the label's address:125
check the label's codeSection[IC]:00000111110110
check ic = 12
check index operands =
check add
 check single operand
check add 2
check 0
check direct
check here's the direct operand operandNode value:
check direct operand bmc value:000000000000
check operandsList on addOperandsValuesToCodeSection: STR[5]
check add 2
check 2
ok
check label = STR
ok
check 3
ok
check 3check good to go
check 4, 5
!!!!check 2
check stat = 5
check command!
check all good!!!!!!!!!!



check not null
check  0
check here's the indexLabel: STR
check 1
check yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check yyy STR STR
check true
check 125
check here's the label that was found: STR 2
check relocateable
check 125
check the label's address:125
check the label's codeSection[IC]:00000111110110
check ic = 14
check index operands =
check add
 check single operand
check add 2
check 0
check direct
check here's the direct operand operandNode value:
check direct operand bmc value:000000000000
check operandsList (next) on addOperandsValuesToCodeSection: STR[2]






 check!!!!!!!!!!!!!!!!!!!






check operand K ,
check stat = 5
check command!
check temp value = K
check operand #
check stat = 5
check command!
check temp value = sz
check add
check add to code section
check add 2
check 1
check 2 K
check yyy W K
check yyy sz K
check yyy MAIN K
check yyy LOOP K
check yyy L1 K
check yyy END K
check yyy len K
check yyy STR K
check yyy LIST K
check yyy K K
check true
check operandsList on addOperandsValuesToCodeSection: K
check add 2
check 0
check direct
check yyy W sz
check yyy sz sz
check true
check 4
check yyy W sz
check yyy sz sz
check true
check here's the direct operand operandNode value: sz
check direct operand bmc value:000000000010
check operandsList (next) on addOperandsValuesToCodeSection: sz






 check!!!!!!!!!!!!!!!!!!!






check operand W
check stat = 5
check command!
check temp value = W
check add
 check single operand W
check add 2
check 1
check 2 W
check yyy W W
check true






 check!!!!!!!!!!!!!!!!!!!






check operand L
check stat = 5
check command!
check temp value = L3
check add
 check single operand L3
check add 2
check 1
check 2 L3
check yyy W L3
check yyy sz L3
check yyy MAIN L3
check yyy LOOP L3
check yyy L1 L3
check yyy END L3
check yyy len L3
check yyy STR L3
check yyy LIST L3
check yyy K L3
check yyy L3 L3
check true






 check!!!!!!!!!!!!!!!!!!!






check operand L
check stat = 5
check command!
check temp value = LOOP
check add
 check single operand LOOP
check add 2
check 1
check 2 LOOP
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check yyy LOOP LOOP
check true






 check!!!!!!!!!!!!!!!!!!!






check add
check return null
check got to create
check 4
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check yyy LIST LIST
check true
check 4
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check yyy LOOP LOOP
check true
check WTF
check close phase2
check phase2 done
check got to list destroy
check got to list destroy
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ cat Test1.
Test1.as      Test1.as.ent  Test1.as.ext  Test1.as.ob   Test1.ent     Test1.ext     Test1.ob
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ rm Test1.as.ent Test1.as.ext Test1.as.ob Test1.ent Test1.ext Test1.ob
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as
check the filename is - Test1

 Begin processing the following file: Test1.as





 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 2
check temp value = LIST






 check!!!!!!!!!!!!!!!!!!!






check operand W

check stat = 3
check temp value = W
check 3
check false
check important W 0






 check!!!!!!!!!!!!!!!!!!!






check operand s
check stat = 4
check temp value = sz
check sz
check got here   10
check index = 11
check 13 2
check out of while
check end = 13
check operand = 2
check end = 15
check v = 2
check stat = 4
check headlist good = 1         label = 1       value = sz      check type = 1  value = sz      check type = 0  value = 2       check here's the macro info: sz 2
check 3
check yyy W sz
check false
check important sz 2
check 3
check yyy W MAIN
check yyy sz MAIN
check false
check important MAIN 100






 check!!!!!!!!!!!!!!!!!!!






check operand r ,
check stat = 5
check command!
check temp value = r3



 check got to '[' sign
check ]
check operand L
check stat = 5
check command!
check command 2
check temp value = LIST[sz]
ok
check label = LIST
ok
check 4
ok
check 4check good to go
check 5, 7
!!!!check sz
check stat = 5
check command!
check all good!!!!!!!!!!



check 3
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check false
check important LOOP 104






 check!!!!!!!!!!!!!!!!!!!






check operand W
check stat = 5
check command!
check temp value = W






 check!!!!!!!!!!!!!!!!!!!






check operand #
check stat = 5
check command!
check temp value = -5






 check!!!!!!!!!!!!!!!!!!!






check operand r ,
check stat = 5
check command!
check temp value = r1
check operand r
check stat = 5
check command!
check temp value = r4






 check!!!!!!!!!!!!!!!!!!!









 check got to '[' sign
check ]
check operand S ,
check stat = 5
check command!
check command 2
check temp value = STR[5]



 check got to '[' sign
check ]
check operand S
check stat = 5
check command!
check command 2
check temp value = STR[2]
ok
check label = STR
ok
check 3
ok
check 3check good to go
check 4, 5
!!!!check 5
check stat = 5
check command!
check all good!!!!!!!!!!



ok
check label = STR
ok
check 3
ok
check 3check good to go
check 4, 5
!!!!check 2
check stat = 5
check command!
check all good!!!!!!!!!!









 check!!!!!!!!!!!!!!!!!!!






check operand K ,
check stat = 5
check command!
check temp value = K
check operand #
check stat = 5
check command!
check temp value = sz






 check!!!!!!!!!!!!!!!!!!!






check operand W
check stat = 5
check command!
check temp value = W
check 3
check yyy W L1
check yyy sz L1
check yyy MAIN L1
check yyy LOOP L1
check false
check important L1 120






 check!!!!!!!!!!!!!!!!!!!






check operand L
check stat = 5
check command!
check temp value = L3






 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 2
check temp value = LOOP






 check!!!!!!!!!!!!!!!!!!!






check operand L
check stat = 5
check command!
check temp value = LOOP
check 3
check yyy W END
check yyy sz END
check yyy MAIN END
check yyy LOOP END
check yyy L1 END
check false
check important END 124






 check!!!!!!!!!!!!!!!!!!!












 check!!!!!!!!!!!!!!!!!!!






check operand l
check stat = 4
check temp value = len
check len
check got here   11
check index = 12
check 14 4
check out of while
check end = 14
check operand = 4
check end = 16
check v = 4
check stat = 4
check headlist good = 1         label = 1       value = len     check type = 1  value = len     check type = 0  value = 4       check here's the macro info: len        4
check 3
check yyy W len
check yyy sz len
check yyy MAIN len
check yyy LOOP len
check yyy L1 len
check yyy END len
check false
check important len 4






 check!!!!!!!!!!!!!!!!!!!






check operand "

check stat = 1
check temp value = abcdef
check 3
check yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check false
check important STR 0






 check!!!!!!!!!!!!!!!!!!!






check operand 6 ,
check stat = 0
check temp value = 6
check operand - ,
check stat = 0
check temp value = -9
check operand l

check stat = 0
check yyy W len
check yyy sz len
check yyy MAIN len
check yyy LOOP len
check yyy L1 len
check yyy END len
check yyy len len
check true
check temp value = len
check 3
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check false
check important LIST 7






 check!!!!!!!!!!!!!!!!!!!






check operand 2

check stat = 0
check temp value = 22
check 3
check yyy W K
check yyy sz K
check yyy MAIN K
check yyy LOOP K
check yyy L1 K
check yyy END K
check yyy len K
check yyy STR K
check yyy LIST K
check false
check important K 10






 check!!!!!!!!!!!!!!!!!!!






check operand L

check stat = 3
check temp value = L3
check 3
check yyy W L3
check yyy sz L3
check yyy MAIN L3
check yyy LOOP L3
check yyy L1 L3
check yyy END L3
check yyy len L3
check yyy STR L3
check yyy LIST L3
check yyy K L3
check false
check important L3 0
check is null 1!
check 24 got to doPhase2
check 14 again open or creation of Test1 was done successfully
this is the IC size:25






 check!!!!!!!!!!!!!!!!!!!






check operand r ,
check stat = 5
check command!
check temp value = r3



 check got to '[' sign
check ]
check operand L
check stat = 5
check command!
check command 2
check temp value = LIST[sz]
check add
check add to code section
check add 2
check 3
check src register operand value:000011000000
check operandsList on addOperandsValuesToCodeSection: r3
check add 2
check 2
ok
check label = LIST
ok
check 4
ok
check 4check good to go
check 5, 7
!!!!check sz
check stat = 5
check command!
check all good!!!!!!!!!!



check not null
check sz 1
check here's the indexLabel: LIST
check 1
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check yyy LIST LIST
check true
check 132
check here's the label that was found: LIST 2
check relocateable
check 132
check the label's address:132
check the label's codeSection[IC]:00001000010010
check ic = 3
check index operands = sz
check add
 check single operand sz
check add 2
check 1
check 2 sz
check yyy W sz
check yyy sz sz
check true
check operandsList (next) on addOperandsValuesToCodeSection: LIST[sz]






 check!!!!!!!!!!!!!!!!!!!






check operand W
check stat = 5
check command!
check temp value = W
check add
 check single operand W
check add 2
check 1
check 2 W
check yyy W W
check true






 check!!!!!!!!!!!!!!!!!!!






check operand #
check stat = 5
check command!
check temp value = -5
check add
 check single operand -5
check add 2
check 0
check direct
check here's the direct operand operandNode value: -5
check direct operand bmc value:111111111011






 check!!!!!!!!!!!!!!!!!!!






check operand r ,
check stat = 5
check command!
check temp value = r1
check operand r
check stat = 5
check command!
check temp value = r4
check add
check 2 registerscheck registerOneValue:000001
check registerTwoValue:000100
check codeSection[IC]: 00000100010000






 check!!!!!!!!!!!!!!!!!!!









 check got to '[' sign
check ]
check operand S ,
check stat = 5
check command!
check command 2
check temp value = STR[5]



 check got to '[' sign
check ]
check operand S
check stat = 5
check command!
check command 2
check temp value = STR[2]
check add
check add to code section
check add 2
check 2
ok
check label = STR
ok
check 3
ok
check 3check good to go
check 4, 5
!!!!check 5
check stat = 5
check command!
check all good!!!!!!!!!!



check not null
check  0
check here's the indexLabel: STR
check 1
check yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check yyy STR STR
check true
check 125
check here's the label that was found: STR 2
check relocateable
check 125
check the label's address:125
check the label's codeSection[IC]:00000111110110
check ic = 12
check index operands =
check add
 check single operand
check add 2
check 0
check direct
check here's the direct operand operandNode value:
check direct operand bmc value:000000000000
check operandsList on addOperandsValuesToCodeSection: STR[5]
check add 2
check 2
ok
check label = STR
ok
check 3
ok
check 3check good to go
check 4, 5
!!!!check 2
check stat = 5
check command!
check all good!!!!!!!!!!



check not null
check  0
check here's the indexLabel: STR
check 1
check yyy W STR
check yyy sz STR
check yyy MAIN STR
check yyy LOOP STR
check yyy L1 STR
check yyy END STR
check yyy len STR
check yyy STR STR
check true
check 125
check here's the label that was found: STR 2
check relocateable
check 125
check the label's address:125
check the label's codeSection[IC]:00000111110110
check ic = 14
check index operands =
check add
 check single operand
check add 2
check 0
check direct
check here's the direct operand operandNode value:
check direct operand bmc value:000000000000
check operandsList (next) on addOperandsValuesToCodeSection: STR[2]






 check!!!!!!!!!!!!!!!!!!!






check operand K ,
check stat = 5
check command!
check temp value = K
check operand #
check stat = 5
check command!
check temp value = sz
check add
check add to code section
check add 2
check 1
check 2 K
check yyy W K
check yyy sz K
check yyy MAIN K
check yyy LOOP K
check yyy L1 K
check yyy END K
check yyy len K
check yyy STR K
check yyy LIST K
check yyy K K
check true
check operandsList on addOperandsValuesToCodeSection: K
check add 2
check 0
check direct
check yyy W sz
check yyy sz sz
check true
check 4
check yyy W sz
check yyy sz sz
check true
check here's the direct operand operandNode value: sz
check direct operand bmc value:000000000010
check operandsList (next) on addOperandsValuesToCodeSection: sz






 check!!!!!!!!!!!!!!!!!!!






check operand W
check stat = 5
check command!
check temp value = W
check add
 check single operand W
check add 2
check 1
check 2 W
check yyy W W
check true






 check!!!!!!!!!!!!!!!!!!!






check operand L
check stat = 5
check command!
check temp value = L3
check add
 check single operand L3
check add 2
check 1
check 2 L3
check yyy W L3
check yyy sz L3
check yyy MAIN L3
check yyy LOOP L3
check yyy L1 L3
check yyy END L3
check yyy len L3
check yyy STR L3
check yyy LIST L3
check yyy K L3
check yyy L3 L3
check true






 check!!!!!!!!!!!!!!!!!!!






check operand L
check stat = 5
check command!
check temp value = LOOP
check add
 check single operand LOOP
check add 2
check 1
check 2 LOOP
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check yyy LOOP LOOP
check true






 check!!!!!!!!!!!!!!!!!!!






check add
check return null
check got to create
check 4
check yyy W LIST
check yyy sz LIST
check yyy MAIN LIST
check yyy LOOP LIST
check yyy L1 LIST
check yyy END LIST
check yyy len LIST
check yyy STR LIST
check yyy LIST LIST
check true
check 4
check yyy W LOOP
check yyy sz LOOP
check yyy MAIN LOOP
check yyy LOOP LOOP
check true
check WTF
check close phase2
check phase2 done
check got to list destroy
check got to list destroy

 Assembler completed processing file: Test1.asavivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ cat Test1.
Test1.as   Test1.ent  Test1.ext  Test1.ob
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2amans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ rm Test1.ob Test1.ext Test1.ent
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as > /mnt/c/
Apps/                      git/                       Program Files (x86)/
bootmgr                    hiberfil.sys               Recovery/
BOOTNXT                    Intel/                     $Recycle.Bin/
Config.Msi/                langpacks/                 StartMenu.ini
Dell/                      OneDriveTemp/              swapfile.sys
dell.sdr                   pagefile.sys               System Volume Information/
Drivers/                   PerfLogs/                  Users/
eeColorTables/             ProgramData/               Windows/
$GetCurrent/               Program Files/             Windows10Upgrade/
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as > /mnt/c/
Apps/                      git/                       Program Files (x86)/
bootmgr                    hiberfil.sys               Recovery/
BOOTNXT                    Intel/                     $Recycle.Bin/
Config.Msi/                langpacks/                 StartMenu.ini
Dell/                      OneDriveTemp/              swapfile.sys
dell.sdr                   pagefile.sys               System Volume Information/
Drivers/                   PerfLogs/                  Users/
eeColorTables/             ProgramData/               Windows/
$GetCurrent/               Program Files/             Windows10Upgrade/
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as > /mnt/c/Users/avivk/C
CLionProjects/ Contacts/
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ ./assembler Test1.as > /mnt/c/Users/avivk/CheckFile5
*** Error in `./assembler': corrupted size vs. prev_size: 0x0000000001d0e290 ***
======= Backtrace: =========
/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f74384a77e5]
/lib/x86_64-linux-gnu/libc.so.6(+0x80dfb)[0x7f74384b0dfb]
/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7f74384b453c]
/lib/x86_64-linux-gnu/libc.so.6(fclose+0x103)[0x7f743849d363]
./assembler[0x400ffe]
./assembler[0x400e51]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f7438450830]
./assembler[0x400be9]
======= Memory map: ========
00400000-00409000 r-xp 00000000 00:00 29809                      /mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2/assembler
00409000-0040a000 r-xp 00009000 00:00 29809                      /mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2/assembler
00609000-0060a000 r--p 00009000 00:00 29809                      /mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2/assembler
0060a000-0060b000 rw-p 0000a000 00:00 29809                      /mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2/assembler
01d0d000-01d2e000 rw-p 00000000 00:00 0                          [heap]
7f7434000000-7f7434021000 rw-p 00000000 00:00 0
7f7434021000-7f7438000000 ---p 00000000 00:00 0
7f7438210000-7f7438226000 r-xp 00000000 00:00 500802             /lib/x86_64-linux-gnu/libgcc_s.so.1
7f7438226000-7f7438425000 ---p 00000016 00:00 500802             /lib/x86_64-linux-gnu/libgcc_s.so.1
7f7438425000-7f7438426000 rw-p 00015000 00:00 500802             /lib/x86_64-linux-gnu/libgcc_s.so.1
7f7438430000-7f74385f0000 r-xp 00000000 00:00 515453             /lib/x86_64-linux-gnu/libc-2.23.so
7f74385f0000-7f74385f9000 ---p 001c0000 00:00 515453             /lib/x86_64-linux-gnu/libc-2.23.so
7f74385f9000-7f74387f0000 ---p 000001c9 00:00 515453             /lib/x86_64-linux-gnu/libc-2.23.so
7f74387f0000-7f74387f4000 r--p 001c0000 00:00 515453             /lib/x86_64-linux-gnu/libc-2.23.so
7f74387f4000-7f74387f6000 rw-p 001c4000 00:00 515453             /lib/x86_64-linux-gnu/libc-2.23.so
7f74387f6000-7f74387fa000 rw-p 00000000 00:00 0
7f7438800000-7f7438825000 r-xp 00000000 00:00 515436             /lib/x86_64-linux-gnu/ld-2.23.so
7f7438825000-7f7438826000 r-xp 00025000 00:00 515436             /lib/x86_64-linux-gnu/ld-2.23.so
7f7438a25000-7f7438a26000 r--p 00025000 00:00 515436             /lib/x86_64-linux-gnu/ld-2.23.so
7f7438a26000-7f7438a27000 rw-p 00026000 00:00 515436             /lib/x86_64-linux-gnu/ld-2.23.so
7f7438a27000-7f7438a28000 rw-p 00000000 00:00 0
7f7438b90000-7f7438b91000 rw-p 00000000 00:00 0
7f7438ba0000-7f7438ba1000 rw-p 00000000 00:00 0
7f7438bb0000-7f7438bb1000 rw-p 00000000 00:00 0
7f7438bc0000-7f7438bc1000 rw-p 00000000 00:00 0
7fffe9e70000-7fffea670000 rw-p 00000000 00:00 0                  [stack]
7fffead6e000-7fffead6f000 r-xp 00000000 00:00 0                  [vdso]
Aborted (core dumped)
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ cat Test1.
Test1.ent  Test1.ext  Test1.ob
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ cat Test1.ob
25 11
0100    ****!%*
0101    **!****
0102    **%*#*%
0103    *****%%
0104    **%#*#*
0105    ******#
0106    **!****
0107    !!!!%!*
0108    ***!!!*
0109    **#*#**
0110    ****%%*
0111    **#!!#%
0112    *******
0113    **#!!#%
0114    *******
0115    ***##**
0116    **%*#!%
0117    *****%*
0118    **%%*#*
0119    ******#
0120    **#!*#*
0121    ******#
0122    **%%*#*
0123    **#%%*%
0124    **!!***
0125    ***#%*#
0126    ***#%*%
0127    ***#%*!
0128    ***#%#*
0129    ***#%##
0130    ***#%#%
0131    *******
0132    *****#%
0133    !!!!!#!
0134    *******
0135    ****##%
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$ make
gcc -c -Wall -pedantic  src/main.c -o main.o
gcc -c -Wall -pedantic  src/phase2.c -o phase2.o
gcc -c -Wall -pedantic  src/phase1.c -o phase1.o
gcc -c -Wall -pedantic  src/modules/SymbolsTable.c -o SymbolsTable.o
gcc -c -Wall -pedantic  src/modules/CodeSegement.c -o CodeSegement.o
gcc -c -Wall -pedantic  src/modules/Analyzer.c -o Analyzer.o
gcc -c -Wall -pedantic  src/modules/CommandBuilder.c -o CommandBuilder.o
gcc -c -Wall -pedantic  src/modules/CommandsIndex.c -o CommandsIndex.o
gcc -c -Wall -pedantic  src/modules/DataSegment.c -o DataSegment.o
gcc -c -Wall -pedantic  src/modules/Opearnds.c -o Opearnds.o
gcc -c -Wall -pedantic  src/utils/TextUtils.c -o TextUtils.o
gcc -c -Wall -pedantic  src/utils/Binary.c -o Binary.o
gcc -c -Wall -pedantic  src/utils/FileReader.c -o FileReader.o
gcc -c -Wall -pedantic  src/utils/FileWriter.c -o FileWriter.o
gcc -c -Wall -pedantic  src/utils/Error.c -o Error.o
gcc -c -Wall -pedantic  src/utils/List.c -o List.o
gcc -g -Wall -pedantic -ansi main.o phase2.o phase1.o SymbolsTable.o CodeSegement.o Analyzer.o CommandBuilder.o CommandsIndex.o DataSegment.o Opearnds.o TextUtils.o Binary.o FileReader.o FileWriter.o Error.o List.o  -o assembler -lm
rm *.o
avivka@DESKTOP-48MKEI0:/mnt/c/Users/avivk/Google Drive/Computer Files/Files/BSc Computer Science/C Lab/2019bMamans/Maman14_SecondShot_v2$